// The definition of mayastor gRPC interface.

// This interface is supposed to be independent on particular computing
// environment (i.e. kubernetes).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.16.0
// source: mayastor.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State of the storage pool (terminology comes from ZFS).
type PoolState int32

const (
	PoolState_POOL_UNKNOWN  PoolState = 0
	PoolState_POOL_ONLINE   PoolState = 1 // the pool is in normal working order
	PoolState_POOL_DEGRADED PoolState = 2 // the pool has experienced a failure but can still function
	PoolState_POOL_FAULTED  PoolState = 3 // the pool is completely inaccessible
)

// Enum value maps for PoolState.
var (
	PoolState_name = map[int32]string{
		0: "POOL_UNKNOWN",
		1: "POOL_ONLINE",
		2: "POOL_DEGRADED",
		3: "POOL_FAULTED",
	}
	PoolState_value = map[string]int32{
		"POOL_UNKNOWN":  0,
		"POOL_ONLINE":   1,
		"POOL_DEGRADED": 2,
		"POOL_FAULTED":  3,
	}
)

func (x PoolState) Enum() *PoolState {
	p := new(PoolState)
	*p = x
	return p
}

func (x PoolState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolState) Descriptor() protoreflect.EnumDescriptor {
	return file_mayastor_proto_enumTypes[0].Descriptor()
}

func (PoolState) Type() protoreflect.EnumType {
	return &file_mayastor_proto_enumTypes[0]
}

func (x PoolState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolState.Descriptor instead.
func (PoolState) EnumDescriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{0}
}

// Protocol for remote storage access which exposes a replica.
type ShareProtocolReplica int32

const (
	ShareProtocolReplica_REPLICA_NONE  ShareProtocolReplica = 0 // not exposed
	ShareProtocolReplica_REPLICA_NVMF  ShareProtocolReplica = 1 // NVMe over Fabrics (TCP)
	ShareProtocolReplica_REPLICA_ISCSI ShareProtocolReplica = 2 // iSCSI
)

// Enum value maps for ShareProtocolReplica.
var (
	ShareProtocolReplica_name = map[int32]string{
		0: "REPLICA_NONE",
		1: "REPLICA_NVMF",
		2: "REPLICA_ISCSI",
	}
	ShareProtocolReplica_value = map[string]int32{
		"REPLICA_NONE":  0,
		"REPLICA_NVMF":  1,
		"REPLICA_ISCSI": 2,
	}
)

func (x ShareProtocolReplica) Enum() *ShareProtocolReplica {
	p := new(ShareProtocolReplica)
	*p = x
	return p
}

func (x ShareProtocolReplica) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareProtocolReplica) Descriptor() protoreflect.EnumDescriptor {
	return file_mayastor_proto_enumTypes[1].Descriptor()
}

func (ShareProtocolReplica) Type() protoreflect.EnumType {
	return &file_mayastor_proto_enumTypes[1]
}

func (x ShareProtocolReplica) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareProtocolReplica.Descriptor instead.
func (ShareProtocolReplica) EnumDescriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{1}
}

// Note that enum values use C++ scoping rules, meaning that enum values are siblings of their type,
// not children of it.
// So cannot use NBD, NVMF, and ISCSI as symbols for ShareProtocolNexus
type ShareProtocolNexus int32

const (
	ShareProtocolNexus_NEXUS_NBD   ShareProtocolNexus = 0 // local
	ShareProtocolNexus_NEXUS_NVMF  ShareProtocolNexus = 1 // NVMe over Fabrics (TCP)
	ShareProtocolNexus_NEXUS_ISCSI ShareProtocolNexus = 2 // iSCSI
)

// Enum value maps for ShareProtocolNexus.
var (
	ShareProtocolNexus_name = map[int32]string{
		0: "NEXUS_NBD",
		1: "NEXUS_NVMF",
		2: "NEXUS_ISCSI",
	}
	ShareProtocolNexus_value = map[string]int32{
		"NEXUS_NBD":   0,
		"NEXUS_NVMF":  1,
		"NEXUS_ISCSI": 2,
	}
)

func (x ShareProtocolNexus) Enum() *ShareProtocolNexus {
	p := new(ShareProtocolNexus)
	*p = x
	return p
}

func (x ShareProtocolNexus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareProtocolNexus) Descriptor() protoreflect.EnumDescriptor {
	return file_mayastor_proto_enumTypes[2].Descriptor()
}

func (ShareProtocolNexus) Type() protoreflect.EnumType {
	return &file_mayastor_proto_enumTypes[2]
}

func (x ShareProtocolNexus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareProtocolNexus.Descriptor instead.
func (ShareProtocolNexus) EnumDescriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{2}
}

// State of the nexus child.
type ChildState int32

const (
	ChildState_CHILD_UNKNOWN  ChildState = 0
	ChildState_CHILD_ONLINE   ChildState = 1 // healthy and contains the latest bits
	ChildState_CHILD_DEGRADED ChildState = 2 // rebuild is in progress (or other recoverable error)
	ChildState_CHILD_FAULTED  ChildState = 3 // unrecoverable error (control plane must act)
)

// Enum value maps for ChildState.
var (
	ChildState_name = map[int32]string{
		0: "CHILD_UNKNOWN",
		1: "CHILD_ONLINE",
		2: "CHILD_DEGRADED",
		3: "CHILD_FAULTED",
	}
	ChildState_value = map[string]int32{
		"CHILD_UNKNOWN":  0,
		"CHILD_ONLINE":   1,
		"CHILD_DEGRADED": 2,
		"CHILD_FAULTED":  3,
	}
)

func (x ChildState) Enum() *ChildState {
	p := new(ChildState)
	*p = x
	return p
}

func (x ChildState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChildState) Descriptor() protoreflect.EnumDescriptor {
	return file_mayastor_proto_enumTypes[3].Descriptor()
}

func (ChildState) Type() protoreflect.EnumType {
	return &file_mayastor_proto_enumTypes[3]
}

func (x ChildState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChildState.Descriptor instead.
func (ChildState) EnumDescriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{3}
}

// State of the nexus (terminology inspired by ZFS).
type NexusState int32

const (
	NexusState_NEXUS_UNKNOWN  NexusState = 0
	NexusState_NEXUS_ONLINE   NexusState = 1 // healthy and working
	NexusState_NEXUS_DEGRADED NexusState = 2 // not healthy but is able to serve IO (i.e. rebuild is in progress)
	NexusState_NEXUS_FAULTED  NexusState = 3 // broken and unable to serve IO
)

// Enum value maps for NexusState.
var (
	NexusState_name = map[int32]string{
		0: "NEXUS_UNKNOWN",
		1: "NEXUS_ONLINE",
		2: "NEXUS_DEGRADED",
		3: "NEXUS_FAULTED",
	}
	NexusState_value = map[string]int32{
		"NEXUS_UNKNOWN":  0,
		"NEXUS_ONLINE":   1,
		"NEXUS_DEGRADED": 2,
		"NEXUS_FAULTED":  3,
	}
)

func (x NexusState) Enum() *NexusState {
	p := new(NexusState)
	*p = x
	return p
}

func (x NexusState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NexusState) Descriptor() protoreflect.EnumDescriptor {
	return file_mayastor_proto_enumTypes[4].Descriptor()
}

func (NexusState) Type() protoreflect.EnumType {
	return &file_mayastor_proto_enumTypes[4]
}

func (x NexusState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NexusState.Descriptor instead.
func (NexusState) EnumDescriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{4}
}

type NvmeAnaState int32

const (
	NvmeAnaState_NVME_ANA_INVALID_STATE         NvmeAnaState = 0 // invalid, do not use
	NvmeAnaState_NVME_ANA_OPTIMIZED_STATE       NvmeAnaState = 1
	NvmeAnaState_NVME_ANA_NON_OPTIMIZED_STATE   NvmeAnaState = 2
	NvmeAnaState_NVME_ANA_INACCESSIBLE_STATE    NvmeAnaState = 3
	NvmeAnaState_NVME_ANA_PERSISTENT_LOSS_STATE NvmeAnaState = 4  // not yet supported
	NvmeAnaState_NVME_ANA_CHANGE_STATE          NvmeAnaState = 15 // not yet supported
)

// Enum value maps for NvmeAnaState.
var (
	NvmeAnaState_name = map[int32]string{
		0:  "NVME_ANA_INVALID_STATE",
		1:  "NVME_ANA_OPTIMIZED_STATE",
		2:  "NVME_ANA_NON_OPTIMIZED_STATE",
		3:  "NVME_ANA_INACCESSIBLE_STATE",
		4:  "NVME_ANA_PERSISTENT_LOSS_STATE",
		15: "NVME_ANA_CHANGE_STATE",
	}
	NvmeAnaState_value = map[string]int32{
		"NVME_ANA_INVALID_STATE":         0,
		"NVME_ANA_OPTIMIZED_STATE":       1,
		"NVME_ANA_NON_OPTIMIZED_STATE":   2,
		"NVME_ANA_INACCESSIBLE_STATE":    3,
		"NVME_ANA_PERSISTENT_LOSS_STATE": 4,
		"NVME_ANA_CHANGE_STATE":          15,
	}
)

func (x NvmeAnaState) Enum() *NvmeAnaState {
	p := new(NvmeAnaState)
	*p = x
	return p
}

func (x NvmeAnaState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeAnaState) Descriptor() protoreflect.EnumDescriptor {
	return file_mayastor_proto_enumTypes[5].Descriptor()
}

func (NvmeAnaState) Type() protoreflect.EnumType {
	return &file_mayastor_proto_enumTypes[5]
}

func (x NvmeAnaState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeAnaState.Descriptor instead.
func (NvmeAnaState) EnumDescriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{5}
}

type ChildAction int32

const (
	ChildAction_offline ChildAction = 0
	ChildAction_online  ChildAction = 1
)

// Enum value maps for ChildAction.
var (
	ChildAction_name = map[int32]string{
		0: "offline",
		1: "online",
	}
	ChildAction_value = map[string]int32{
		"offline": 0,
		"online":  1,
	}
)

func (x ChildAction) Enum() *ChildAction {
	p := new(ChildAction)
	*p = x
	return p
}

func (x ChildAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChildAction) Descriptor() protoreflect.EnumDescriptor {
	return file_mayastor_proto_enumTypes[6].Descriptor()
}

func (ChildAction) Type() protoreflect.EnumType {
	return &file_mayastor_proto_enumTypes[6]
}

func (x ChildAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChildAction.Descriptor instead.
func (ChildAction) EnumDescriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{6}
}

type NvmeControllerState int32

const (
	NvmeControllerState_NEW           NvmeControllerState = 0
	NvmeControllerState_INITIALIZING  NvmeControllerState = 1
	NvmeControllerState_RUNNING       NvmeControllerState = 2
	NvmeControllerState_FAULTED       NvmeControllerState = 3
	NvmeControllerState_UNCONFIGURING NvmeControllerState = 4
	NvmeControllerState_UNCONFIGURED  NvmeControllerState = 5
)

// Enum value maps for NvmeControllerState.
var (
	NvmeControllerState_name = map[int32]string{
		0: "NEW",
		1: "INITIALIZING",
		2: "RUNNING",
		3: "FAULTED",
		4: "UNCONFIGURING",
		5: "UNCONFIGURED",
	}
	NvmeControllerState_value = map[string]int32{
		"NEW":           0,
		"INITIALIZING":  1,
		"RUNNING":       2,
		"FAULTED":       3,
		"UNCONFIGURING": 4,
		"UNCONFIGURED":  5,
	}
)

func (x NvmeControllerState) Enum() *NvmeControllerState {
	p := new(NvmeControllerState)
	*p = x
	return p
}

func (x NvmeControllerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeControllerState) Descriptor() protoreflect.EnumDescriptor {
	return file_mayastor_proto_enumTypes[7].Descriptor()
}

func (NvmeControllerState) Type() protoreflect.EnumType {
	return &file_mayastor_proto_enumTypes[7]
}

func (x NvmeControllerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeControllerState.Descriptor instead.
func (NvmeControllerState) EnumDescriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{7}
}

// Means no arguments or no return value.
type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{0}
}

// Create pool arguments.
// Currently we support only concatenation of disks (RAID-0).
type CreatePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // name of the pool
	Disks []string `protobuf:"bytes,2,rep,name=disks,proto3" json:"disks,omitempty"` // disk device paths or URIs to be claimed by the pool
}

func (x *CreatePoolRequest) Reset() {
	*x = CreatePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolRequest) ProtoMessage() {}

func (x *CreatePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePoolRequest.ProtoReflect.Descriptor instead.
func (*CreatePoolRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePoolRequest) GetDisks() []string {
	if x != nil {
		return x.Disks
	}
	return nil
}

// Storage pool properties
type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            // name of the pool
	Disks    []string  `protobuf:"bytes,2,rep,name=disks,proto3" json:"disks,omitempty"`                          // absolute disk paths claimed by the pool
	State    PoolState `protobuf:"varint,3,opt,name=state,proto3,enum=mayastor.PoolState" json:"state,omitempty"` // current state of the pool
	Capacity uint64    `protobuf:"varint,5,opt,name=capacity,proto3" json:"capacity,omitempty"`                   // size of the pool in bytes
	Used     uint64    `protobuf:"varint,6,opt,name=used,proto3" json:"used,omitempty"`                           // used bytes from the pool
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{2}
}

func (x *Pool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pool) GetDisks() []string {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *Pool) GetState() PoolState {
	if x != nil {
		return x.State
	}
	return PoolState_POOL_UNKNOWN
}

func (x *Pool) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Pool) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

// Destroy pool arguments.
type DestroyPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // name of the pool
}

func (x *DestroyPoolRequest) Reset() {
	*x = DestroyPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyPoolRequest) ProtoMessage() {}

func (x *DestroyPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyPoolRequest.ProtoReflect.Descriptor instead.
func (*DestroyPoolRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{3}
}

func (x *DestroyPoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// List of pools and their properties.
type ListPoolsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*Pool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"` // list of the pools
}

func (x *ListPoolsReply) Reset() {
	*x = ListPoolsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoolsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoolsReply) ProtoMessage() {}

func (x *ListPoolsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoolsReply.ProtoReflect.Descriptor instead.
func (*ListPoolsReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{4}
}

func (x *ListPoolsReply) GetPools() []*Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

// Create replica arguments.
type CreateReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                       // uuid of the replica
	Pool  string               `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`                                       // name of the pool
	Size  uint64               `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`                                      // size of the replica in bytes
	Thin  bool                 `protobuf:"varint,4,opt,name=thin,proto3" json:"thin,omitempty"`                                      // thin provisioning
	Share ShareProtocolReplica `protobuf:"varint,5,opt,name=share,proto3,enum=mayastor.ShareProtocolReplica" json:"share,omitempty"` // protocol to expose the replica over
}

func (x *CreateReplicaRequest) Reset() {
	*x = CreateReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicaRequest) ProtoMessage() {}

func (x *CreateReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicaRequest.ProtoReflect.Descriptor instead.
func (*CreateReplicaRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{5}
}

func (x *CreateReplicaRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CreateReplicaRequest) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *CreateReplicaRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateReplicaRequest) GetThin() bool {
	if x != nil {
		return x.Thin
	}
	return false
}

func (x *CreateReplicaRequest) GetShare() ShareProtocolReplica {
	if x != nil {
		return x.Share
	}
	return ShareProtocolReplica_REPLICA_NONE
}

// Destroy replica arguments.
type DestroyReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // name of the replica
}

func (x *DestroyReplicaRequest) Reset() {
	*x = DestroyReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyReplicaRequest) ProtoMessage() {}

func (x *DestroyReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyReplicaRequest.ProtoReflect.Descriptor instead.
func (*DestroyReplicaRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{6}
}

func (x *DestroyReplicaRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Replica properties
type Replica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                       // uuid of the replica
	Pool  string               `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`                                       // name of the pool
	Thin  bool                 `protobuf:"varint,3,opt,name=thin,proto3" json:"thin,omitempty"`                                      // thin provisioning
	Size  uint64               `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                                      // size of the replica in bytes
	Share ShareProtocolReplica `protobuf:"varint,5,opt,name=share,proto3,enum=mayastor.ShareProtocolReplica" json:"share,omitempty"` // protocol used for exposing the replica
	Uri   string               `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`                                         // uri usable by nexus to access it
}

func (x *Replica) Reset() {
	*x = Replica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Replica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replica) ProtoMessage() {}

func (x *Replica) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replica.ProtoReflect.Descriptor instead.
func (*Replica) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{7}
}

func (x *Replica) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Replica) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *Replica) GetThin() bool {
	if x != nil {
		return x.Thin
	}
	return false
}

func (x *Replica) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Replica) GetShare() ShareProtocolReplica {
	if x != nil {
		return x.Share
	}
	return ShareProtocolReplica_REPLICA_NONE
}

func (x *Replica) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// List of replicas and their properties.
type ListReplicasReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas []*Replica `protobuf:"bytes,1,rep,name=replicas,proto3" json:"replicas,omitempty"` // list of the replicas
}

func (x *ListReplicasReply) Reset() {
	*x = ListReplicasReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReplicasReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReplicasReply) ProtoMessage() {}

func (x *ListReplicasReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReplicasReply.ProtoReflect.Descriptor instead.
func (*ListReplicasReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{8}
}

func (x *ListReplicasReply) GetReplicas() []*Replica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

// NOTE: We use struct instead of more suitable map type, because JS protobuf
// lib has problem (yields garbage) when decoding maps containing u64:
// https://github.com/protobufjs/protobuf.js/issues/1203
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumReadOps   uint64 `protobuf:"varint,1,opt,name=num_read_ops,json=numReadOps,proto3" json:"num_read_ops,omitempty"`
	NumWriteOps  uint64 `protobuf:"varint,2,opt,name=num_write_ops,json=numWriteOps,proto3" json:"num_write_ops,omitempty"`
	BytesRead    uint64 `protobuf:"varint,3,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	BytesWritten uint64 `protobuf:"varint,4,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{9}
}

func (x *Stats) GetNumReadOps() uint64 {
	if x != nil {
		return x.NumReadOps
	}
	return 0
}

func (x *Stats) GetNumWriteOps() uint64 {
	if x != nil {
		return x.NumWriteOps
	}
	return 0
}

func (x *Stats) GetBytesRead() uint64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *Stats) GetBytesWritten() uint64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

// Replica stats
type ReplicaStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`   // uuid of the replica
	Pool  string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`   // name of the pool
	Stats *Stats `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"` // stat counters
}

func (x *ReplicaStats) Reset() {
	*x = ReplicaStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaStats) ProtoMessage() {}

func (x *ReplicaStats) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaStats.ProtoReflect.Descriptor instead.
func (*ReplicaStats) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{10}
}

func (x *ReplicaStats) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ReplicaStats) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *ReplicaStats) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// List of replicas and their properties.
type StatReplicasReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas []*ReplicaStats `protobuf:"bytes,1,rep,name=replicas,proto3" json:"replicas,omitempty"` // list of the replicas
}

func (x *StatReplicasReply) Reset() {
	*x = StatReplicasReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatReplicasReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatReplicasReply) ProtoMessage() {}

func (x *StatReplicasReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatReplicasReply.ProtoReflect.Descriptor instead.
func (*StatReplicasReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{11}
}

func (x *StatReplicasReply) GetReplicas() []*ReplicaStats {
	if x != nil {
		return x.Replicas
	}
	return nil
}

// Share replica request.
type ShareReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                       // uuid of the replica
	Share ShareProtocolReplica `protobuf:"varint,2,opt,name=share,proto3,enum=mayastor.ShareProtocolReplica" json:"share,omitempty"` // protocol used for exposing the replica
}

func (x *ShareReplicaRequest) Reset() {
	*x = ShareReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareReplicaRequest) ProtoMessage() {}

func (x *ShareReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareReplicaRequest.ProtoReflect.Descriptor instead.
func (*ShareReplicaRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{12}
}

func (x *ShareReplicaRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ShareReplicaRequest) GetShare() ShareProtocolReplica {
	if x != nil {
		return x.Share
	}
	return ShareProtocolReplica_REPLICA_NONE
}

// Share replica response.
type ShareReplicaReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"` // uri under which the replica is accessible by nexus
}

func (x *ShareReplicaReply) Reset() {
	*x = ShareReplicaReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareReplicaReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareReplicaReply) ProtoMessage() {}

func (x *ShareReplicaReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareReplicaReply.ProtoReflect.Descriptor instead.
func (*ShareReplicaReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{13}
}

func (x *ShareReplicaReply) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// Create nexus arguments.
type CreateNexusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`  // this UUID will be set in as the UUID
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"` // size of the device in bytes
	// replica can be iscsi and nvmf remote targets or a local spdk bdev
	// (i.e. bdev:///name-of-the-bdev).
	Children []string `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"` // uris to the targets we connect to
}

func (x *CreateNexusRequest) Reset() {
	*x = CreateNexusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNexusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNexusRequest) ProtoMessage() {}

func (x *CreateNexusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNexusRequest.ProtoReflect.Descriptor instead.
func (*CreateNexusRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{14}
}

func (x *CreateNexusRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CreateNexusRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateNexusRequest) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

// represents a child device part of a nexus
type Child struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri             string     `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`                               // uri of the child device
	State           ChildState `protobuf:"varint,2,opt,name=state,proto3,enum=mayastor.ChildState" json:"state,omitempty"` // state of the child
	RebuildProgress int32      `protobuf:"varint,3,opt,name=rebuild_progress,json=rebuildProgress,proto3" json:"rebuild_progress,omitempty"`
}

func (x *Child) Reset() {
	*x = Child{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Child) ProtoMessage() {}

func (x *Child) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Child.ProtoReflect.Descriptor instead.
func (*Child) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{15}
}

func (x *Child) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Child) GetState() ChildState {
	if x != nil {
		return x.State
	}
	return ChildState_CHILD_UNKNOWN
}

func (x *Child) GetRebuildProgress() int32 {
	if x != nil {
		return x.RebuildProgress
	}
	return 0
}

// represents a nexus device
type Nexus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                             // name of the nexus
	Size     uint64     `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`                            // size of the volume in bytes
	State    NexusState `protobuf:"varint,3,opt,name=state,proto3,enum=mayastor.NexusState" json:"state,omitempty"` // current state of the nexus
	Children []*Child   `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`                     // array of children
	// URI of the device for the volume (missing if not published).
	// Missing property and empty string are treated the same.
	DeviceUri string `protobuf:"bytes,5,opt,name=device_uri,json=deviceUri,proto3" json:"device_uri,omitempty"`
	Rebuilds  uint32 `protobuf:"varint,6,opt,name=rebuilds,proto3" json:"rebuilds,omitempty"` // total number of rebuild tasks
}

func (x *Nexus) Reset() {
	*x = Nexus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nexus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nexus) ProtoMessage() {}

func (x *Nexus) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nexus.ProtoReflect.Descriptor instead.
func (*Nexus) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{16}
}

func (x *Nexus) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Nexus) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Nexus) GetState() NexusState {
	if x != nil {
		return x.State
	}
	return NexusState_NEXUS_UNKNOWN
}

func (x *Nexus) GetChildren() []*Child {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Nexus) GetDeviceUri() string {
	if x != nil {
		return x.DeviceUri
	}
	return ""
}

func (x *Nexus) GetRebuilds() uint32 {
	if x != nil {
		return x.Rebuilds
	}
	return 0
}

type ListNexusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NexusList []*Nexus `protobuf:"bytes,1,rep,name=nexus_list,json=nexusList,proto3" json:"nexus_list,omitempty"`
}

func (x *ListNexusReply) Reset() {
	*x = ListNexusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNexusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNexusReply) ProtoMessage() {}

func (x *ListNexusReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNexusReply.ProtoReflect.Descriptor instead.
func (*ListNexusReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{17}
}

func (x *ListNexusReply) GetNexusList() []*Nexus {
	if x != nil {
		return x.NexusList
	}
	return nil
}

type DestroyNexusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
}

func (x *DestroyNexusRequest) Reset() {
	*x = DestroyNexusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyNexusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyNexusRequest) ProtoMessage() {}

func (x *DestroyNexusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyNexusRequest.ProtoReflect.Descriptor instead.
func (*DestroyNexusRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{18}
}

func (x *DestroyNexusRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type AddChildNexusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`            // uuid of the nexus
	Uri       string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`              // URI of the child device to be added
	Norebuild bool   `protobuf:"varint,3,opt,name=norebuild,proto3" json:"norebuild,omitempty"` // auto start rebuilding
}

func (x *AddChildNexusRequest) Reset() {
	*x = AddChildNexusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddChildNexusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddChildNexusRequest) ProtoMessage() {}

func (x *AddChildNexusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddChildNexusRequest.ProtoReflect.Descriptor instead.
func (*AddChildNexusRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{19}
}

func (x *AddChildNexusRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AddChildNexusRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *AddChildNexusRequest) GetNorebuild() bool {
	if x != nil {
		return x.Norebuild
	}
	return false
}

type RemoveChildNexusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`   // URI of the child device to be removed
}

func (x *RemoveChildNexusRequest) Reset() {
	*x = RemoveChildNexusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChildNexusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChildNexusRequest) ProtoMessage() {}

func (x *RemoveChildNexusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChildNexusRequest.ProtoReflect.Descriptor instead.
func (*RemoveChildNexusRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveChildNexusRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RemoveChildNexusRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type FaultNexusChildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`   // URI of the child device to be faulted
}

func (x *FaultNexusChildRequest) Reset() {
	*x = FaultNexusChildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultNexusChildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultNexusChildRequest) ProtoMessage() {}

func (x *FaultNexusChildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultNexusChildRequest.ProtoReflect.Descriptor instead.
func (*FaultNexusChildRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{21}
}

func (x *FaultNexusChildRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FaultNexusChildRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// this message will be subject to change as we will add support for remote
// storage protocols.
type PublishNexusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  string             `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                     // uuid of the nexus which to create device for
	Key   string             `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`                                       // encryption key
	Share ShareProtocolNexus `protobuf:"varint,3,opt,name=share,proto3,enum=mayastor.ShareProtocolNexus" json:"share,omitempty"` // protocol used for the front end.
}

func (x *PublishNexusRequest) Reset() {
	*x = PublishNexusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishNexusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishNexusRequest) ProtoMessage() {}

func (x *PublishNexusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishNexusRequest.ProtoReflect.Descriptor instead.
func (*PublishNexusRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{22}
}

func (x *PublishNexusRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PublishNexusRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PublishNexusRequest) GetShare() ShareProtocolNexus {
	if x != nil {
		return x.Share
	}
	return ShareProtocolNexus_NEXUS_NBD
}

type PublishNexusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUri string `protobuf:"bytes,1,opt,name=device_uri,json=deviceUri,proto3" json:"device_uri,omitempty"` // i.e. file:///dev/nbd0
}

func (x *PublishNexusReply) Reset() {
	*x = PublishNexusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishNexusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishNexusReply) ProtoMessage() {}

func (x *PublishNexusReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishNexusReply.ProtoReflect.Descriptor instead.
func (*PublishNexusReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{23}
}

func (x *PublishNexusReply) GetDeviceUri() string {
	if x != nil {
		return x.DeviceUri
	}
	return ""
}

type UnpublishNexusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus which to destroy
}

func (x *UnpublishNexusRequest) Reset() {
	*x = UnpublishNexusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpublishNexusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishNexusRequest) ProtoMessage() {}

func (x *UnpublishNexusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishNexusRequest.ProtoReflect.Descriptor instead.
func (*UnpublishNexusRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{24}
}

func (x *UnpublishNexusRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetNvmeAnaStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
}

func (x *GetNvmeAnaStateRequest) Reset() {
	*x = GetNvmeAnaStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNvmeAnaStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNvmeAnaStateRequest) ProtoMessage() {}

func (x *GetNvmeAnaStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNvmeAnaStateRequest.ProtoReflect.Descriptor instead.
func (*GetNvmeAnaStateRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{25}
}

func (x *GetNvmeAnaStateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetNvmeAnaStateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnaState NvmeAnaState `protobuf:"varint,1,opt,name=ana_state,json=anaState,proto3,enum=mayastor.NvmeAnaState" json:"ana_state,omitempty"`
}

func (x *GetNvmeAnaStateReply) Reset() {
	*x = GetNvmeAnaStateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNvmeAnaStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNvmeAnaStateReply) ProtoMessage() {}

func (x *GetNvmeAnaStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNvmeAnaStateReply.ProtoReflect.Descriptor instead.
func (*GetNvmeAnaStateReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{26}
}

func (x *GetNvmeAnaStateReply) GetAnaState() NvmeAnaState {
	if x != nil {
		return x.AnaState
	}
	return NvmeAnaState_NVME_ANA_INVALID_STATE
}

type SetNvmeAnaStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
	AnaState NvmeAnaState `protobuf:"varint,2,opt,name=ana_state,json=anaState,proto3,enum=mayastor.NvmeAnaState" json:"ana_state,omitempty"`
}

func (x *SetNvmeAnaStateRequest) Reset() {
	*x = SetNvmeAnaStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNvmeAnaStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNvmeAnaStateRequest) ProtoMessage() {}

func (x *SetNvmeAnaStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNvmeAnaStateRequest.ProtoReflect.Descriptor instead.
func (*SetNvmeAnaStateRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{27}
}

func (x *SetNvmeAnaStateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SetNvmeAnaStateRequest) GetAnaState() NvmeAnaState {
	if x != nil {
		return x.AnaState
	}
	return NvmeAnaState_NVME_ANA_INVALID_STATE
}

type ChildNexusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Uri    string      `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Action ChildAction `protobuf:"varint,3,opt,name=action,proto3,enum=mayastor.ChildAction" json:"action,omitempty"`
}

func (x *ChildNexusRequest) Reset() {
	*x = ChildNexusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildNexusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildNexusRequest) ProtoMessage() {}

func (x *ChildNexusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildNexusRequest.ProtoReflect.Descriptor instead.
func (*ChildNexusRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{28}
}

func (x *ChildNexusRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ChildNexusRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ChildNexusRequest) GetAction() ChildAction {
	if x != nil {
		return x.Action
	}
	return ChildAction_offline
}

type RebuildStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`   // uri of the destination child
}

func (x *RebuildStateRequest) Reset() {
	*x = RebuildStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildStateRequest) ProtoMessage() {}

func (x *RebuildStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildStateRequest.ProtoReflect.Descriptor instead.
func (*RebuildStateRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{29}
}

func (x *RebuildStateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RebuildStateRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type RebuildStateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"` // current rebuild state (i.e. ready/running/completed etc.)
}

func (x *RebuildStateReply) Reset() {
	*x = RebuildStateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildStateReply) ProtoMessage() {}

func (x *RebuildStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildStateReply.ProtoReflect.Descriptor instead.
func (*RebuildStateReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{30}
}

func (x *RebuildStateReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type RebuildStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`   // uri of the destination child
}

func (x *RebuildStatsRequest) Reset() {
	*x = RebuildStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildStatsRequest) ProtoMessage() {}

func (x *RebuildStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildStatsRequest.ProtoReflect.Descriptor instead.
func (*RebuildStatsRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{31}
}

func (x *RebuildStatsRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RebuildStatsRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type RebuildStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlocksTotal     uint64 `protobuf:"varint,1,opt,name=blocks_total,json=blocksTotal,proto3" json:"blocks_total,omitempty"`               // total number of blocks to recover
	BlocksRecovered uint64 `protobuf:"varint,2,opt,name=blocks_recovered,json=blocksRecovered,proto3" json:"blocks_recovered,omitempty"`   // number of blocks recovered
	Progress        uint64 `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`                                        // rebuild progress %
	SegmentSizeBlks uint64 `protobuf:"varint,4,opt,name=segment_size_blks,json=segmentSizeBlks,proto3" json:"segment_size_blks,omitempty"` // granularity of each recovery copy in blocks
	BlockSize       uint64 `protobuf:"varint,5,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`                     // size in bytes of each block
	TasksTotal      uint64 `protobuf:"varint,6,opt,name=tasks_total,json=tasksTotal,proto3" json:"tasks_total,omitempty"`                  // total number of concurrent rebuild tasks
	TasksActive     uint64 `protobuf:"varint,7,opt,name=tasks_active,json=tasksActive,proto3" json:"tasks_active,omitempty"`               // number of current active tasks
}

func (x *RebuildStatsReply) Reset() {
	*x = RebuildStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildStatsReply) ProtoMessage() {}

func (x *RebuildStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildStatsReply.ProtoReflect.Descriptor instead.
func (*RebuildStatsReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{32}
}

func (x *RebuildStatsReply) GetBlocksTotal() uint64 {
	if x != nil {
		return x.BlocksTotal
	}
	return 0
}

func (x *RebuildStatsReply) GetBlocksRecovered() uint64 {
	if x != nil {
		return x.BlocksRecovered
	}
	return 0
}

func (x *RebuildStatsReply) GetProgress() uint64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *RebuildStatsReply) GetSegmentSizeBlks() uint64 {
	if x != nil {
		return x.SegmentSizeBlks
	}
	return 0
}

func (x *RebuildStatsReply) GetBlockSize() uint64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *RebuildStatsReply) GetTasksTotal() uint64 {
	if x != nil {
		return x.TasksTotal
	}
	return 0
}

func (x *RebuildStatsReply) GetTasksActive() uint64 {
	if x != nil {
		return x.TasksActive
	}
	return 0
}

type StartRebuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`   // uri of the child to be rebuilt
}

func (x *StartRebuildRequest) Reset() {
	*x = StartRebuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRebuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRebuildRequest) ProtoMessage() {}

func (x *StartRebuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRebuildRequest.ProtoReflect.Descriptor instead.
func (*StartRebuildRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{33}
}

func (x *StartRebuildRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *StartRebuildRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type StopRebuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`   // uri of the destination child
}

func (x *StopRebuildRequest) Reset() {
	*x = StopRebuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRebuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRebuildRequest) ProtoMessage() {}

func (x *StopRebuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRebuildRequest.ProtoReflect.Descriptor instead.
func (*StopRebuildRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{34}
}

func (x *StopRebuildRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *StopRebuildRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type PauseRebuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`   // uri of the destination child
}

func (x *PauseRebuildRequest) Reset() {
	*x = PauseRebuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseRebuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseRebuildRequest) ProtoMessage() {}

func (x *PauseRebuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseRebuildRequest.ProtoReflect.Descriptor instead.
func (*PauseRebuildRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{35}
}

func (x *PauseRebuildRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PauseRebuildRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type ResumeRebuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`   // uri of the destination child
}

func (x *ResumeRebuildRequest) Reset() {
	*x = ResumeRebuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeRebuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeRebuildRequest) ProtoMessage() {}

func (x *ResumeRebuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeRebuildRequest.ProtoReflect.Descriptor instead.
func (*ResumeRebuildRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{36}
}

func (x *ResumeRebuildRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ResumeRebuildRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type RebuildProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
	Uri  string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`   // uri of the destination child
}

func (x *RebuildProgressRequest) Reset() {
	*x = RebuildProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildProgressRequest) ProtoMessage() {}

func (x *RebuildProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildProgressRequest.ProtoReflect.Descriptor instead.
func (*RebuildProgressRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{37}
}

func (x *RebuildProgressRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RebuildProgressRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type RebuildProgressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress uint32 `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"` // progress percentage
}

func (x *RebuildProgressReply) Reset() {
	*x = RebuildProgressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildProgressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildProgressReply) ProtoMessage() {}

func (x *RebuildProgressReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildProgressReply.ProtoReflect.Descriptor instead.
func (*RebuildProgressReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{38}
}

func (x *RebuildProgressReply) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type CreateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the nexus
}

func (x *CreateSnapshotRequest) Reset() {
	*x = CreateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotRequest) ProtoMessage() {}

func (x *CreateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{39}
}

func (x *CreateSnapshotRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CreateSnapshotReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // name of snapshot created
}

func (x *CreateSnapshotReply) Reset() {
	*x = CreateSnapshotReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotReply) ProtoMessage() {}

func (x *CreateSnapshotReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotReply.ProtoReflect.Descriptor instead.
func (*CreateSnapshotReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{40}
}

func (x *CreateSnapshotReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BlockDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devname    string                  `protobuf:"bytes,1,opt,name=devname,proto3" json:"devname,omitempty"`        // entry in /dev associated with device
	Devtype    string                  `protobuf:"bytes,2,opt,name=devtype,proto3" json:"devtype,omitempty"`        // currently "disk" or "partition"
	Devmajor   uint32                  `protobuf:"varint,3,opt,name=devmajor,proto3" json:"devmajor,omitempty"`     // major device number
	Devminor   uint32                  `protobuf:"varint,4,opt,name=devminor,proto3" json:"devminor,omitempty"`     // minor device number
	Model      string                  `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`            // device model - useful for identifying mayastor devices
	Devpath    string                  `protobuf:"bytes,6,opt,name=devpath,proto3" json:"devpath,omitempty"`        // official device path
	Devlinks   []string                `protobuf:"bytes,7,rep,name=devlinks,proto3" json:"devlinks,omitempty"`      // list of udev generated symlinks by which device may be identified
	Size       uint64                  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`             // size of device in (512 byte) blocks
	Partition  *BlockDevice_Partition  `protobuf:"bytes,9,opt,name=partition,proto3" json:"partition,omitempty"`    // partition information in case where device represents a partition
	Filesystem *BlockDevice_Filesystem `protobuf:"bytes,10,opt,name=filesystem,proto3" json:"filesystem,omitempty"` // filesystem information in case where a filesystem is present
	Available  bool                    `protobuf:"varint,11,opt,name=available,proto3" json:"available,omitempty"`  // identifies if device is available for use (ie. is not "currently" in use)
}

func (x *BlockDevice) Reset() {
	*x = BlockDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDevice) ProtoMessage() {}

func (x *BlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDevice.ProtoReflect.Descriptor instead.
func (*BlockDevice) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{41}
}

func (x *BlockDevice) GetDevname() string {
	if x != nil {
		return x.Devname
	}
	return ""
}

func (x *BlockDevice) GetDevtype() string {
	if x != nil {
		return x.Devtype
	}
	return ""
}

func (x *BlockDevice) GetDevmajor() uint32 {
	if x != nil {
		return x.Devmajor
	}
	return 0
}

func (x *BlockDevice) GetDevminor() uint32 {
	if x != nil {
		return x.Devminor
	}
	return 0
}

func (x *BlockDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *BlockDevice) GetDevpath() string {
	if x != nil {
		return x.Devpath
	}
	return ""
}

func (x *BlockDevice) GetDevlinks() []string {
	if x != nil {
		return x.Devlinks
	}
	return nil
}

func (x *BlockDevice) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BlockDevice) GetPartition() *BlockDevice_Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *BlockDevice) GetFilesystem() *BlockDevice_Filesystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

func (x *BlockDevice) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type ListBlockDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"` // list "all" block devices found (not just "available" ones)
}

func (x *ListBlockDevicesRequest) Reset() {
	*x = ListBlockDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlockDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlockDevicesRequest) ProtoMessage() {}

func (x *ListBlockDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlockDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListBlockDevicesRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{42}
}

func (x *ListBlockDevicesRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type ListBlockDevicesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*BlockDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *ListBlockDevicesReply) Reset() {
	*x = ListBlockDevicesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlockDevicesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlockDevicesReply) ProtoMessage() {}

func (x *ListBlockDevicesReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlockDevicesReply.ProtoReflect.Descriptor instead.
func (*ListBlockDevicesReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{43}
}

func (x *ListBlockDevicesReply) GetDevices() []*BlockDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

type ResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftFaults  int64 `protobuf:"varint,1,opt,name=soft_faults,json=softFaults,proto3" json:"soft_faults,omitempty"`      // page reclaims (soft page faults)
	HardFaults  int64 `protobuf:"varint,2,opt,name=hard_faults,json=hardFaults,proto3" json:"hard_faults,omitempty"`      // hard page faults
	Swaps       int64 `protobuf:"varint,3,opt,name=swaps,proto3" json:"swaps,omitempty"`                                  // swaps
	InBlockOps  int64 `protobuf:"varint,4,opt,name=in_block_ops,json=inBlockOps,proto3" json:"in_block_ops,omitempty"`    // input block operations
	OutBlockOps int64 `protobuf:"varint,5,opt,name=out_block_ops,json=outBlockOps,proto3" json:"out_block_ops,omitempty"` // output block operations
	IpcMsgSend  int64 `protobuf:"varint,6,opt,name=ipc_msg_send,json=ipcMsgSend,proto3" json:"ipc_msg_send,omitempty"`    // IPC messages sent
	IpcMsgRcv   int64 `protobuf:"varint,7,opt,name=ipc_msg_rcv,json=ipcMsgRcv,proto3" json:"ipc_msg_rcv,omitempty"`       // IPC messages received
	Signals     int64 `protobuf:"varint,8,opt,name=signals,proto3" json:"signals,omitempty"`                              // signals received
	VolCsw      int64 `protobuf:"varint,9,opt,name=vol_csw,json=volCsw,proto3" json:"vol_csw,omitempty"`                  // voluntary context switches
	InvolCsw    int64 `protobuf:"varint,10,opt,name=invol_csw,json=involCsw,proto3" json:"invol_csw,omitempty"`           // involuntary context switches
}

func (x *ResourceUsage) Reset() {
	*x = ResourceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsage) ProtoMessage() {}

func (x *ResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsage.ProtoReflect.Descriptor instead.
func (*ResourceUsage) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{44}
}

func (x *ResourceUsage) GetSoftFaults() int64 {
	if x != nil {
		return x.SoftFaults
	}
	return 0
}

func (x *ResourceUsage) GetHardFaults() int64 {
	if x != nil {
		return x.HardFaults
	}
	return 0
}

func (x *ResourceUsage) GetSwaps() int64 {
	if x != nil {
		return x.Swaps
	}
	return 0
}

func (x *ResourceUsage) GetInBlockOps() int64 {
	if x != nil {
		return x.InBlockOps
	}
	return 0
}

func (x *ResourceUsage) GetOutBlockOps() int64 {
	if x != nil {
		return x.OutBlockOps
	}
	return 0
}

func (x *ResourceUsage) GetIpcMsgSend() int64 {
	if x != nil {
		return x.IpcMsgSend
	}
	return 0
}

func (x *ResourceUsage) GetIpcMsgRcv() int64 {
	if x != nil {
		return x.IpcMsgRcv
	}
	return 0
}

func (x *ResourceUsage) GetSignals() int64 {
	if x != nil {
		return x.Signals
	}
	return 0
}

func (x *ResourceUsage) GetVolCsw() int64 {
	if x != nil {
		return x.VolCsw
	}
	return 0
}

func (x *ResourceUsage) GetInvolCsw() int64 {
	if x != nil {
		return x.InvolCsw
	}
	return 0
}

type GetResourceUsageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage *ResourceUsage `protobuf:"bytes,1,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *GetResourceUsageReply) Reset() {
	*x = GetResourceUsageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceUsageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceUsageReply) ProtoMessage() {}

func (x *GetResourceUsageReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceUsageReply.ProtoReflect.Descriptor instead.
func (*GetResourceUsageReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{45}
}

func (x *GetResourceUsageReply) GetUsage() *ResourceUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type BdevShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Proto string `protobuf:"bytes,2,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (x *BdevShareRequest) Reset() {
	*x = BdevShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BdevShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BdevShareRequest) ProtoMessage() {}

func (x *BdevShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BdevShareRequest.ProtoReflect.Descriptor instead.
func (*BdevShareRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{46}
}

func (x *BdevShareRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BdevShareRequest) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

type BdevShareReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *BdevShareReply) Reset() {
	*x = BdevShareReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BdevShareReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BdevShareReply) ProtoMessage() {}

func (x *BdevShareReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BdevShareReply.ProtoReflect.Descriptor instead.
func (*BdevShareReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{47}
}

func (x *BdevShareReply) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type Bdev struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid        string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	NumBlocks   uint64 `protobuf:"varint,3,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	BlkSize     uint32 `protobuf:"varint,5,opt,name=blk_size,json=blkSize,proto3" json:"blk_size,omitempty"`
	Claimed     bool   `protobuf:"varint,6,opt,name=claimed,proto3" json:"claimed,omitempty"`
	ClaimedBy   string `protobuf:"bytes,7,opt,name=claimed_by,json=claimedBy,proto3" json:"claimed_by,omitempty"`
	Aliases     string `protobuf:"bytes,8,opt,name=aliases,proto3" json:"aliases,omitempty"`
	Uri         string `protobuf:"bytes,9,opt,name=uri,proto3" json:"uri,omitempty"`
	ProductName string `protobuf:"bytes,10,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ShareUri    string `protobuf:"bytes,11,opt,name=share_uri,json=shareUri,proto3" json:"share_uri,omitempty"`
}

func (x *Bdev) Reset() {
	*x = Bdev{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bdev) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bdev) ProtoMessage() {}

func (x *Bdev) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bdev.ProtoReflect.Descriptor instead.
func (*Bdev) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{48}
}

func (x *Bdev) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bdev) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Bdev) GetNumBlocks() uint64 {
	if x != nil {
		return x.NumBlocks
	}
	return 0
}

func (x *Bdev) GetBlkSize() uint32 {
	if x != nil {
		return x.BlkSize
	}
	return 0
}

func (x *Bdev) GetClaimed() bool {
	if x != nil {
		return x.Claimed
	}
	return false
}

func (x *Bdev) GetClaimedBy() string {
	if x != nil {
		return x.ClaimedBy
	}
	return ""
}

func (x *Bdev) GetAliases() string {
	if x != nil {
		return x.Aliases
	}
	return ""
}

func (x *Bdev) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Bdev) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Bdev) GetShareUri() string {
	if x != nil {
		return x.ShareUri
	}
	return ""
}

type Bdevs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bdevs []*Bdev `protobuf:"bytes,1,rep,name=bdevs,proto3" json:"bdevs,omitempty"`
}

func (x *Bdevs) Reset() {
	*x = Bdevs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bdevs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bdevs) ProtoMessage() {}

func (x *Bdevs) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bdevs.ProtoReflect.Descriptor instead.
func (*Bdevs) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{49}
}

func (x *Bdevs) GetBdevs() []*Bdev {
	if x != nil {
		return x.Bdevs
	}
	return nil
}

type BdevUri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *BdevUri) Reset() {
	*x = BdevUri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BdevUri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BdevUri) ProtoMessage() {}

func (x *BdevUri) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BdevUri.ProtoReflect.Descriptor instead.
func (*BdevUri) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{50}
}

func (x *BdevUri) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type CreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateReply) Reset() {
	*x = CreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReply) ProtoMessage() {}

func (x *CreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReply.ProtoReflect.Descriptor instead.
func (*CreateReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{51}
}

func (x *CreateReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NvmeController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                      // NVMe controller name
	State   NvmeControllerState `protobuf:"varint,2,opt,name=state,proto3,enum=mayastor.NvmeControllerState" json:"state,omitempty"` // Current state of the NVMe controller
	Size    uint64              `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`                                     // Size of the controller's namespace (0 if no namespace attached).
	BlkSize uint32              `protobuf:"varint,4,opt,name=blk_size,json=blkSize,proto3" json:"blk_size,omitempty"`                // Block size of the namespace (0 if no namespace attached).
}

func (x *NvmeController) Reset() {
	*x = NvmeController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeController) ProtoMessage() {}

func (x *NvmeController) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeController.ProtoReflect.Descriptor instead.
func (*NvmeController) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{52}
}

func (x *NvmeController) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NvmeController) GetState() NvmeControllerState {
	if x != nil {
		return x.State
	}
	return NvmeControllerState_NEW
}

func (x *NvmeController) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *NvmeController) GetBlkSize() uint32 {
	if x != nil {
		return x.BlkSize
	}
	return 0
}

type ListNvmeControllersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controllers []*NvmeController `protobuf:"bytes,1,rep,name=controllers,proto3" json:"controllers,omitempty"`
}

func (x *ListNvmeControllersReply) Reset() {
	*x = ListNvmeControllersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeControllersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeControllersReply) ProtoMessage() {}

func (x *ListNvmeControllersReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeControllersReply.ProtoReflect.Descriptor instead.
func (*ListNvmeControllersReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{53}
}

func (x *ListNvmeControllersReply) GetControllers() []*NvmeController {
	if x != nil {
		return x.Controllers
	}
	return nil
}

type JsonRpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Params string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *JsonRpcRequest) Reset() {
	*x = JsonRpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonRpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonRpcRequest) ProtoMessage() {}

func (x *JsonRpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonRpcRequest.ProtoReflect.Descriptor instead.
func (*JsonRpcRequest) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{54}
}

func (x *JsonRpcRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *JsonRpcRequest) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

type JsonRpcReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *JsonRpcReply) Reset() {
	*x = JsonRpcReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonRpcReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonRpcReply) ProtoMessage() {}

func (x *JsonRpcReply) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonRpcReply.ProtoReflect.Descriptor instead.
func (*JsonRpcReply) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{55}
}

func (x *JsonRpcReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type BlockDevice_Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`  // devname of parent device to which this partition belongs
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"` // partition number
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`      // partition name
	Scheme string `protobuf:"bytes,4,opt,name=scheme,proto3" json:"scheme,omitempty"`  // partition scheme: gpt, dos, ...
	Typeid string `protobuf:"bytes,5,opt,name=typeid,proto3" json:"typeid,omitempty"`  // partition type identifier
	Uuid   string `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`      // UUID identifying partition
}

func (x *BlockDevice_Partition) Reset() {
	*x = BlockDevice_Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDevice_Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDevice_Partition) ProtoMessage() {}

func (x *BlockDevice_Partition) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDevice_Partition.ProtoReflect.Descriptor instead.
func (*BlockDevice_Partition) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{41, 0}
}

func (x *BlockDevice_Partition) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BlockDevice_Partition) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockDevice_Partition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockDevice_Partition) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *BlockDevice_Partition) GetTypeid() string {
	if x != nil {
		return x.Typeid
	}
	return ""
}

func (x *BlockDevice_Partition) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type BlockDevice_Filesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fstype     string `protobuf:"bytes,1,opt,name=fstype,proto3" json:"fstype,omitempty"`         // filesystem type: ext3, ntfs, ...
	Label      string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`           // volume label
	Uuid       string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`             // UUID identifying the volume (filesystem)
	Mountpoint string `protobuf:"bytes,4,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"` // path where filesystem is currently mounted
}

func (x *BlockDevice_Filesystem) Reset() {
	*x = BlockDevice_Filesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mayastor_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDevice_Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDevice_Filesystem) ProtoMessage() {}

func (x *BlockDevice_Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_mayastor_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDevice_Filesystem.ProtoReflect.Descriptor instead.
func (*BlockDevice_Filesystem) Descriptor() ([]byte, []int) {
	return file_mayastor_proto_rawDescGZIP(), []int{41, 1}
}

func (x *BlockDevice_Filesystem) GetFstype() string {
	if x != nil {
		return x.Fstype
	}
	return ""
}

func (x *BlockDevice_Filesystem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BlockDevice_Filesystem) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BlockDevice_Filesystem) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

var File_mayastor_proto protoreflect.FileDescriptor

var file_mayastor_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x22, 0x06, 0x0a, 0x04, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x3d, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x69, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b,
	0x73, 0x22, 0x8b, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x69, 0x73, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22,
	0x28, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x68, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x68, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x79, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x22, 0x2b, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xa1, 0x01,
	0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x68, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x74, 0x68, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x22, 0x42, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x70,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x22, 0x5d, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x22, 0x5f, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x22, 0x25, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x58, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x22, 0x70, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2a,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x05, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x69, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x22, 0x40, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a,
	0x0a, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x78,
	0x75, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x29, 0x0a,
	0x13, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x72, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x22, 0x3f, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x3e, 0x0a, 0x16, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65,
	0x78, 0x75, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x6f, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0x32, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x69, 0x22, 0x2b, 0x0a, 0x15, 0x55, 0x6e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x76,
	0x6d, 0x65, 0x41, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65,
	0x41, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a,
	0x09, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x76, 0x6d, 0x65,
	0x41, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x6e, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x76, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x61, 0x6e, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x68, 0x0a, 0x11, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x65,
	0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x3b, 0x0a, 0x13, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x29, 0x0a, 0x11,
	0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x13, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x22, 0x8c, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a,
	0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6b, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x22, 0x3a, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x3b, 0x0a, 0x13,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x3c, 0x0a, 0x14, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x3e, 0x0a, 0x16, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xfe, 0x04, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x3d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x93,
	0x01, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x1a, 0x6e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c,
	0x6c, 0x22, 0x48, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x77, 0x61, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x70, 0x63, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x70, 0x63, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x69, 0x70, 0x63, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x63, 0x76, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x70, 0x63, 0x4d, 0x73, 0x67, 0x52, 0x63, 0x76, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x5f, 0x63,
	0x73, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x43, 0x73, 0x77,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x5f, 0x63, 0x73, 0x77, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x43, 0x73, 0x77, 0x22, 0x46, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x10, 0x42, 0x64, 0x65, 0x76, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x0e, 0x42, 0x64, 0x65, 0x76, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x8d, 0x02, 0x0a, 0x04, 0x42, 0x64, 0x65, 0x76,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75,
	0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x69, 0x22, 0x2d, 0x0a, 0x05, 0x42, 0x64, 0x65, 0x76, 0x73,
	0x12, 0x24, 0x0a, 0x05, 0x62, 0x64, 0x65, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x64, 0x65, 0x76, 0x52,
	0x05, 0x62, 0x64, 0x65, 0x76, 0x73, 0x22, 0x1b, 0x0a, 0x07, 0x42, 0x64, 0x65, 0x76, 0x55, 0x72,
	0x69, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x22, 0x21, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x4e, 0x76, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x56, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x76,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x40, 0x0a, 0x0e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x26, 0x0a, 0x0c, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2a, 0x53, 0x0a, 0x09, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x44, 0x45, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x4d, 0x0a, 0x14, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x4e, 0x56,
	0x4d, 0x46, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f,
	0x49, 0x53, 0x43, 0x53, 0x49, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x45, 0x58, 0x55, 0x53, 0x5f, 0x4e, 0x42, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x45, 0x58, 0x55, 0x53, 0x5f, 0x4e, 0x56, 0x4d, 0x46, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x45, 0x58, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x43, 0x53, 0x49, 0x10, 0x02, 0x2a, 0x58, 0x0a,
	0x0a, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x48, 0x49, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x58, 0x0a, 0x0a, 0x4e, 0x65, 0x78, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x58, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x58, 0x55,
	0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45,
	0x58, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x45, 0x58, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0xca, 0x01, 0x0a, 0x0c, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d,
	0x49, 0x5a, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4d, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12,
	0x22, 0x0a, 0x1e, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x53,
	0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x0f, 0x2a, 0x26,
	0x0a, 0x0b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x2a, 0x6f, 0x0a, 0x13, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x05, 0x32, 0xd8, 0x10, 0x0a, 0x08, 0x4d, 0x61, 0x79, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x0e, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x18, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x12,
	0x1c, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4e, 0x65, 0x78, 0x75, 0x73,
	0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x12, 0x0e,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x18,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65,
	0x78, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x41, 0x64,
	0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4e,
	0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x65, 0x78,
	0x75, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x4e, 0x65, 0x78, 0x75, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x78, 0x75, 0x73,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x12, 0x1d,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e,
	0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x12, 0x1f,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4e,
	0x76, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x41, 0x6e,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x0e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x6d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x2e, 0x6d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x22, 0x2e, 0x6d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x32, 0x8f, 0x02, 0x0a, 0x07, 0x42, 0x64, 0x65, 0x76, 0x52, 0x70, 0x63, 0x12, 0x29,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x42, 0x64, 0x65, 0x76, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x42,
	0x64, 0x65, 0x76, 0x55, 0x72, 0x69, 0x1a, 0x15, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x2e, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x64, 0x65, 0x76, 0x55, 0x72, 0x69, 0x1a, 0x0e, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x42, 0x64, 0x65, 0x76, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x42, 0x64, 0x65, 0x76, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x32, 0x0a, 0x07, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x15, 0x2e, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x00, 0x32, 0x4c, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x70, 0x63, 0x12,
	0x41, 0x0a, 0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x18,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x70,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x42, 0x2d, 0x0a, 0x13, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x62, 0x73,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x42, 0x0d, 0x4d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x05, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mayastor_proto_rawDescOnce sync.Once
	file_mayastor_proto_rawDescData = file_mayastor_proto_rawDesc
)

func file_mayastor_proto_rawDescGZIP() []byte {
	file_mayastor_proto_rawDescOnce.Do(func() {
		file_mayastor_proto_rawDescData = protoimpl.X.CompressGZIP(file_mayastor_proto_rawDescData)
	})
	return file_mayastor_proto_rawDescData
}

var file_mayastor_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_mayastor_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_mayastor_proto_goTypes = []interface{}{
	(PoolState)(0),                   // 0: mayastor.PoolState
	(ShareProtocolReplica)(0),        // 1: mayastor.ShareProtocolReplica
	(ShareProtocolNexus)(0),          // 2: mayastor.ShareProtocolNexus
	(ChildState)(0),                  // 3: mayastor.ChildState
	(NexusState)(0),                  // 4: mayastor.NexusState
	(NvmeAnaState)(0),                // 5: mayastor.NvmeAnaState
	(ChildAction)(0),                 // 6: mayastor.ChildAction
	(NvmeControllerState)(0),         // 7: mayastor.NvmeControllerState
	(*Null)(nil),                     // 8: mayastor.Null
	(*CreatePoolRequest)(nil),        // 9: mayastor.CreatePoolRequest
	(*Pool)(nil),                     // 10: mayastor.Pool
	(*DestroyPoolRequest)(nil),       // 11: mayastor.DestroyPoolRequest
	(*ListPoolsReply)(nil),           // 12: mayastor.ListPoolsReply
	(*CreateReplicaRequest)(nil),     // 13: mayastor.CreateReplicaRequest
	(*DestroyReplicaRequest)(nil),    // 14: mayastor.DestroyReplicaRequest
	(*Replica)(nil),                  // 15: mayastor.Replica
	(*ListReplicasReply)(nil),        // 16: mayastor.ListReplicasReply
	(*Stats)(nil),                    // 17: mayastor.Stats
	(*ReplicaStats)(nil),             // 18: mayastor.ReplicaStats
	(*StatReplicasReply)(nil),        // 19: mayastor.StatReplicasReply
	(*ShareReplicaRequest)(nil),      // 20: mayastor.ShareReplicaRequest
	(*ShareReplicaReply)(nil),        // 21: mayastor.ShareReplicaReply
	(*CreateNexusRequest)(nil),       // 22: mayastor.CreateNexusRequest
	(*Child)(nil),                    // 23: mayastor.Child
	(*Nexus)(nil),                    // 24: mayastor.Nexus
	(*ListNexusReply)(nil),           // 25: mayastor.ListNexusReply
	(*DestroyNexusRequest)(nil),      // 26: mayastor.DestroyNexusRequest
	(*AddChildNexusRequest)(nil),     // 27: mayastor.AddChildNexusRequest
	(*RemoveChildNexusRequest)(nil),  // 28: mayastor.RemoveChildNexusRequest
	(*FaultNexusChildRequest)(nil),   // 29: mayastor.FaultNexusChildRequest
	(*PublishNexusRequest)(nil),      // 30: mayastor.PublishNexusRequest
	(*PublishNexusReply)(nil),        // 31: mayastor.PublishNexusReply
	(*UnpublishNexusRequest)(nil),    // 32: mayastor.UnpublishNexusRequest
	(*GetNvmeAnaStateRequest)(nil),   // 33: mayastor.GetNvmeAnaStateRequest
	(*GetNvmeAnaStateReply)(nil),     // 34: mayastor.GetNvmeAnaStateReply
	(*SetNvmeAnaStateRequest)(nil),   // 35: mayastor.SetNvmeAnaStateRequest
	(*ChildNexusRequest)(nil),        // 36: mayastor.ChildNexusRequest
	(*RebuildStateRequest)(nil),      // 37: mayastor.RebuildStateRequest
	(*RebuildStateReply)(nil),        // 38: mayastor.RebuildStateReply
	(*RebuildStatsRequest)(nil),      // 39: mayastor.RebuildStatsRequest
	(*RebuildStatsReply)(nil),        // 40: mayastor.RebuildStatsReply
	(*StartRebuildRequest)(nil),      // 41: mayastor.StartRebuildRequest
	(*StopRebuildRequest)(nil),       // 42: mayastor.StopRebuildRequest
	(*PauseRebuildRequest)(nil),      // 43: mayastor.PauseRebuildRequest
	(*ResumeRebuildRequest)(nil),     // 44: mayastor.ResumeRebuildRequest
	(*RebuildProgressRequest)(nil),   // 45: mayastor.RebuildProgressRequest
	(*RebuildProgressReply)(nil),     // 46: mayastor.RebuildProgressReply
	(*CreateSnapshotRequest)(nil),    // 47: mayastor.CreateSnapshotRequest
	(*CreateSnapshotReply)(nil),      // 48: mayastor.CreateSnapshotReply
	(*BlockDevice)(nil),              // 49: mayastor.BlockDevice
	(*ListBlockDevicesRequest)(nil),  // 50: mayastor.ListBlockDevicesRequest
	(*ListBlockDevicesReply)(nil),    // 51: mayastor.ListBlockDevicesReply
	(*ResourceUsage)(nil),            // 52: mayastor.ResourceUsage
	(*GetResourceUsageReply)(nil),    // 53: mayastor.GetResourceUsageReply
	(*BdevShareRequest)(nil),         // 54: mayastor.BdevShareRequest
	(*BdevShareReply)(nil),           // 55: mayastor.BdevShareReply
	(*Bdev)(nil),                     // 56: mayastor.Bdev
	(*Bdevs)(nil),                    // 57: mayastor.Bdevs
	(*BdevUri)(nil),                  // 58: mayastor.BdevUri
	(*CreateReply)(nil),              // 59: mayastor.CreateReply
	(*NvmeController)(nil),           // 60: mayastor.NvmeController
	(*ListNvmeControllersReply)(nil), // 61: mayastor.ListNvmeControllersReply
	(*JsonRpcRequest)(nil),           // 62: mayastor.JsonRpcRequest
	(*JsonRpcReply)(nil),             // 63: mayastor.JsonRpcReply
	(*BlockDevice_Partition)(nil),    // 64: mayastor.BlockDevice.Partition
	(*BlockDevice_Filesystem)(nil),   // 65: mayastor.BlockDevice.Filesystem
}
var file_mayastor_proto_depIdxs = []int32{
	0,  // 0: mayastor.Pool.state:type_name -> mayastor.PoolState
	10, // 1: mayastor.ListPoolsReply.pools:type_name -> mayastor.Pool
	1,  // 2: mayastor.CreateReplicaRequest.share:type_name -> mayastor.ShareProtocolReplica
	1,  // 3: mayastor.Replica.share:type_name -> mayastor.ShareProtocolReplica
	15, // 4: mayastor.ListReplicasReply.replicas:type_name -> mayastor.Replica
	17, // 5: mayastor.ReplicaStats.stats:type_name -> mayastor.Stats
	18, // 6: mayastor.StatReplicasReply.replicas:type_name -> mayastor.ReplicaStats
	1,  // 7: mayastor.ShareReplicaRequest.share:type_name -> mayastor.ShareProtocolReplica
	3,  // 8: mayastor.Child.state:type_name -> mayastor.ChildState
	4,  // 9: mayastor.Nexus.state:type_name -> mayastor.NexusState
	23, // 10: mayastor.Nexus.children:type_name -> mayastor.Child
	24, // 11: mayastor.ListNexusReply.nexus_list:type_name -> mayastor.Nexus
	2,  // 12: mayastor.PublishNexusRequest.share:type_name -> mayastor.ShareProtocolNexus
	5,  // 13: mayastor.GetNvmeAnaStateReply.ana_state:type_name -> mayastor.NvmeAnaState
	5,  // 14: mayastor.SetNvmeAnaStateRequest.ana_state:type_name -> mayastor.NvmeAnaState
	6,  // 15: mayastor.ChildNexusRequest.action:type_name -> mayastor.ChildAction
	64, // 16: mayastor.BlockDevice.partition:type_name -> mayastor.BlockDevice.Partition
	65, // 17: mayastor.BlockDevice.filesystem:type_name -> mayastor.BlockDevice.Filesystem
	49, // 18: mayastor.ListBlockDevicesReply.devices:type_name -> mayastor.BlockDevice
	52, // 19: mayastor.GetResourceUsageReply.usage:type_name -> mayastor.ResourceUsage
	56, // 20: mayastor.Bdevs.bdevs:type_name -> mayastor.Bdev
	7,  // 21: mayastor.NvmeController.state:type_name -> mayastor.NvmeControllerState
	60, // 22: mayastor.ListNvmeControllersReply.controllers:type_name -> mayastor.NvmeController
	9,  // 23: mayastor.Mayastor.CreatePool:input_type -> mayastor.CreatePoolRequest
	11, // 24: mayastor.Mayastor.DestroyPool:input_type -> mayastor.DestroyPoolRequest
	8,  // 25: mayastor.Mayastor.ListPools:input_type -> mayastor.Null
	13, // 26: mayastor.Mayastor.CreateReplica:input_type -> mayastor.CreateReplicaRequest
	14, // 27: mayastor.Mayastor.DestroyReplica:input_type -> mayastor.DestroyReplicaRequest
	8,  // 28: mayastor.Mayastor.ListReplicas:input_type -> mayastor.Null
	8,  // 29: mayastor.Mayastor.StatReplicas:input_type -> mayastor.Null
	20, // 30: mayastor.Mayastor.ShareReplica:input_type -> mayastor.ShareReplicaRequest
	22, // 31: mayastor.Mayastor.CreateNexus:input_type -> mayastor.CreateNexusRequest
	26, // 32: mayastor.Mayastor.DestroyNexus:input_type -> mayastor.DestroyNexusRequest
	8,  // 33: mayastor.Mayastor.ListNexus:input_type -> mayastor.Null
	27, // 34: mayastor.Mayastor.AddChildNexus:input_type -> mayastor.AddChildNexusRequest
	28, // 35: mayastor.Mayastor.RemoveChildNexus:input_type -> mayastor.RemoveChildNexusRequest
	29, // 36: mayastor.Mayastor.FaultNexusChild:input_type -> mayastor.FaultNexusChildRequest
	30, // 37: mayastor.Mayastor.PublishNexus:input_type -> mayastor.PublishNexusRequest
	32, // 38: mayastor.Mayastor.UnpublishNexus:input_type -> mayastor.UnpublishNexusRequest
	33, // 39: mayastor.Mayastor.GetNvmeAnaState:input_type -> mayastor.GetNvmeAnaStateRequest
	35, // 40: mayastor.Mayastor.SetNvmeAnaState:input_type -> mayastor.SetNvmeAnaStateRequest
	36, // 41: mayastor.Mayastor.ChildOperation:input_type -> mayastor.ChildNexusRequest
	41, // 42: mayastor.Mayastor.StartRebuild:input_type -> mayastor.StartRebuildRequest
	42, // 43: mayastor.Mayastor.StopRebuild:input_type -> mayastor.StopRebuildRequest
	43, // 44: mayastor.Mayastor.PauseRebuild:input_type -> mayastor.PauseRebuildRequest
	44, // 45: mayastor.Mayastor.ResumeRebuild:input_type -> mayastor.ResumeRebuildRequest
	37, // 46: mayastor.Mayastor.GetRebuildState:input_type -> mayastor.RebuildStateRequest
	39, // 47: mayastor.Mayastor.GetRebuildStats:input_type -> mayastor.RebuildStatsRequest
	45, // 48: mayastor.Mayastor.GetRebuildProgress:input_type -> mayastor.RebuildProgressRequest
	47, // 49: mayastor.Mayastor.CreateSnapshot:input_type -> mayastor.CreateSnapshotRequest
	50, // 50: mayastor.Mayastor.ListBlockDevices:input_type -> mayastor.ListBlockDevicesRequest
	8,  // 51: mayastor.Mayastor.GetResourceUsage:input_type -> mayastor.Null
	8,  // 52: mayastor.Mayastor.ListNvmeControllers:input_type -> mayastor.Null
	8,  // 53: mayastor.BdevRpc.List:input_type -> mayastor.Null
	58, // 54: mayastor.BdevRpc.Create:input_type -> mayastor.BdevUri
	58, // 55: mayastor.BdevRpc.Destroy:input_type -> mayastor.BdevUri
	54, // 56: mayastor.BdevRpc.Share:input_type -> mayastor.BdevShareRequest
	59, // 57: mayastor.BdevRpc.Unshare:input_type -> mayastor.CreateReply
	62, // 58: mayastor.JsonRpc.JsonRpcCall:input_type -> mayastor.JsonRpcRequest
	10, // 59: mayastor.Mayastor.CreatePool:output_type -> mayastor.Pool
	8,  // 60: mayastor.Mayastor.DestroyPool:output_type -> mayastor.Null
	12, // 61: mayastor.Mayastor.ListPools:output_type -> mayastor.ListPoolsReply
	15, // 62: mayastor.Mayastor.CreateReplica:output_type -> mayastor.Replica
	8,  // 63: mayastor.Mayastor.DestroyReplica:output_type -> mayastor.Null
	16, // 64: mayastor.Mayastor.ListReplicas:output_type -> mayastor.ListReplicasReply
	19, // 65: mayastor.Mayastor.StatReplicas:output_type -> mayastor.StatReplicasReply
	21, // 66: mayastor.Mayastor.ShareReplica:output_type -> mayastor.ShareReplicaReply
	24, // 67: mayastor.Mayastor.CreateNexus:output_type -> mayastor.Nexus
	8,  // 68: mayastor.Mayastor.DestroyNexus:output_type -> mayastor.Null
	25, // 69: mayastor.Mayastor.ListNexus:output_type -> mayastor.ListNexusReply
	23, // 70: mayastor.Mayastor.AddChildNexus:output_type -> mayastor.Child
	8,  // 71: mayastor.Mayastor.RemoveChildNexus:output_type -> mayastor.Null
	8,  // 72: mayastor.Mayastor.FaultNexusChild:output_type -> mayastor.Null
	31, // 73: mayastor.Mayastor.PublishNexus:output_type -> mayastor.PublishNexusReply
	8,  // 74: mayastor.Mayastor.UnpublishNexus:output_type -> mayastor.Null
	34, // 75: mayastor.Mayastor.GetNvmeAnaState:output_type -> mayastor.GetNvmeAnaStateReply
	8,  // 76: mayastor.Mayastor.SetNvmeAnaState:output_type -> mayastor.Null
	8,  // 77: mayastor.Mayastor.ChildOperation:output_type -> mayastor.Null
	8,  // 78: mayastor.Mayastor.StartRebuild:output_type -> mayastor.Null
	8,  // 79: mayastor.Mayastor.StopRebuild:output_type -> mayastor.Null
	8,  // 80: mayastor.Mayastor.PauseRebuild:output_type -> mayastor.Null
	8,  // 81: mayastor.Mayastor.ResumeRebuild:output_type -> mayastor.Null
	38, // 82: mayastor.Mayastor.GetRebuildState:output_type -> mayastor.RebuildStateReply
	40, // 83: mayastor.Mayastor.GetRebuildStats:output_type -> mayastor.RebuildStatsReply
	46, // 84: mayastor.Mayastor.GetRebuildProgress:output_type -> mayastor.RebuildProgressReply
	48, // 85: mayastor.Mayastor.CreateSnapshot:output_type -> mayastor.CreateSnapshotReply
	51, // 86: mayastor.Mayastor.ListBlockDevices:output_type -> mayastor.ListBlockDevicesReply
	53, // 87: mayastor.Mayastor.GetResourceUsage:output_type -> mayastor.GetResourceUsageReply
	61, // 88: mayastor.Mayastor.ListNvmeControllers:output_type -> mayastor.ListNvmeControllersReply
	57, // 89: mayastor.BdevRpc.List:output_type -> mayastor.Bdevs
	59, // 90: mayastor.BdevRpc.Create:output_type -> mayastor.CreateReply
	8,  // 91: mayastor.BdevRpc.Destroy:output_type -> mayastor.Null
	55, // 92: mayastor.BdevRpc.Share:output_type -> mayastor.BdevShareReply
	8,  // 93: mayastor.BdevRpc.Unshare:output_type -> mayastor.Null
	63, // 94: mayastor.JsonRpc.JsonRpcCall:output_type -> mayastor.JsonRpcReply
	59, // [59:95] is the sub-list for method output_type
	23, // [23:59] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_mayastor_proto_init() }
func file_mayastor_proto_init() {
	if File_mayastor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mayastor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoolsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Replica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReplicasReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatReplicasReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareReplicaReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNexusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Child); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nexus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNexusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyNexusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddChildNexusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChildNexusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultNexusChildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishNexusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishNexusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpublishNexusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNvmeAnaStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNvmeAnaStateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNvmeAnaStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildNexusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildStateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRebuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRebuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseRebuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeRebuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildProgressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlockDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlockDevicesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceUsageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BdevShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BdevShareReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bdev); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bdevs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BdevUri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeControllersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonRpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonRpcReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDevice_Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mayastor_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDevice_Filesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mayastor_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_mayastor_proto_goTypes,
		DependencyIndexes: file_mayastor_proto_depIdxs,
		EnumInfos:         file_mayastor_proto_enumTypes,
		MessageInfos:      file_mayastor_proto_msgTypes,
	}.Build()
	File_mayastor_proto = out.File
	file_mayastor_proto_rawDesc = nil
	file_mayastor_proto_goTypes = nil
	file_mayastor_proto_depIdxs = nil
}
