// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EventClassEnum event class enum
//
// swagger:model EventClassEnum
type EventClassEnum string

func NewEventClassEnum(value EventClassEnum) *EventClassEnum {
	v := value
	return &v
}

const (

	// EventClassEnumFAIL captures enum value "FAIL"
	EventClassEnumFAIL EventClassEnum = "FAIL"

	// EventClassEnumINFO captures enum value "INFO"
	EventClassEnumINFO EventClassEnum = "INFO"

	// EventClassEnumWARN captures enum value "WARN"
	EventClassEnumWARN EventClassEnum = "WARN"
)

// for schema
var eventClassEnumEnum []interface{}

func init() {
	var res []EventClassEnum
	if err := json.Unmarshal([]byte(`["FAIL","INFO","WARN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventClassEnumEnum = append(eventClassEnumEnum, v)
	}
}

func (m EventClassEnum) validateEventClassEnumEnum(path, location string, value EventClassEnum) error {
	if err := validate.EnumCase(path, location, value, eventClassEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this event class enum
func (m EventClassEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEventClassEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this event class enum based on context it is used
func (m EventClassEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
