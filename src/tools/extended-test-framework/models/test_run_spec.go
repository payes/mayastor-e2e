// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestRunSpec test run spec
//
// swagger:model TestRunSpec
type TestRunSpec struct {

	// data field
	// Example: e.g. description of test outcome
	Data string `json:"data,omitempty"`

	// status
	Status TestRunStatusEnum `json:"status,omitempty"`

	// test key
	// Required: true
	TestKey *JiraKey `json:"testKey"`
}

// Validate validates this test run spec
func (m *TestRunSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestRunSpec) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *TestRunSpec) validateTestKey(formats strfmt.Registry) error {

	if err := validate.Required("testKey", "body", m.TestKey); err != nil {
		return err
	}

	if err := validate.Required("testKey", "body", m.TestKey); err != nil {
		return err
	}

	if m.TestKey != nil {
		if err := m.TestKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this test run spec based on the context it is used
func (m *TestRunSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTestKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestRunSpec) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *TestRunSpec) contextValidateTestKey(ctx context.Context, formats strfmt.Registry) error {

	if m.TestKey != nil {
		if err := m.TestKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestRunSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestRunSpec) UnmarshalBinary(b []byte) error {
	var res TestRunSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
