// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWorkloadByRegistrantHandlerFunc turns a function with the right signature into a get workload by registrant handler
type GetWorkloadByRegistrantHandlerFunc func(GetWorkloadByRegistrantParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWorkloadByRegistrantHandlerFunc) Handle(params GetWorkloadByRegistrantParams) middleware.Responder {
	return fn(params)
}

// GetWorkloadByRegistrantHandler interface for that can handle valid get workload by registrant params
type GetWorkloadByRegistrantHandler interface {
	Handle(GetWorkloadByRegistrantParams) middleware.Responder
}

// NewGetWorkloadByRegistrant creates a new http.Handler for the get workload by registrant operation
func NewGetWorkloadByRegistrant(ctx *middleware.Context, handler GetWorkloadByRegistrantHandler) *GetWorkloadByRegistrant {
	return &GetWorkloadByRegistrant{Context: ctx, Handler: handler}
}

/* GetWorkloadByRegistrant swagger:route GET /wm/registrants{rid}/workloads{wid} workload-monitor getWorkloadByRegistrant

returns a specific workload registration (identified  workload and registrant)

*/
type GetWorkloadByRegistrant struct {
	Context *middleware.Context
	Handler GetWorkloadByRegistrantHandler
}

func (o *GetWorkloadByRegistrant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWorkloadByRegistrantParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
