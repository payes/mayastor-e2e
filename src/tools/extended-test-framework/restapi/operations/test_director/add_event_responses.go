// Code generated by go-swagger; DO NOT EDIT.

package test_director

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mayastor-e2e/tools/extended-test-framework/models"
)

// AddEventOKCode is the HTTP code returned for type AddEventOK
const AddEventOKCode int = 200

/*AddEventOK Event was logged and returned to caller

swagger:response addEventOK
*/
type AddEventOK struct {

	/*
	  In: Body
	*/
	Payload *models.Event `json:"body,omitempty"`
}

// NewAddEventOK creates AddEventOK with default headers values
func NewAddEventOK() *AddEventOK {

	return &AddEventOK{}
}

// WithPayload adds the payload to the add event o k response
func (o *AddEventOK) WithPayload(payload *models.Event) *AddEventOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add event o k response
func (o *AddEventOK) SetPayload(payload *models.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddEventOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddEventBadRequestCode is the HTTP code returned for type AddEventBadRequest
const AddEventBadRequestCode int = 400

/*AddEventBadRequest Bad request (malformed/invalid body content)

swagger:response addEventBadRequest
*/
type AddEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.RequestOutcome `json:"body,omitempty"`
}

// NewAddEventBadRequest creates AddEventBadRequest with default headers values
func NewAddEventBadRequest() *AddEventBadRequest {

	return &AddEventBadRequest{}
}

// WithPayload adds the payload to the add event bad request response
func (o *AddEventBadRequest) WithPayload(payload *models.RequestOutcome) *AddEventBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add event bad request response
func (o *AddEventBadRequest) SetPayload(payload *models.RequestOutcome) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
