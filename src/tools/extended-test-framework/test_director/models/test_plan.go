// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestPlan test plan
//
// swagger:model TestPlan
type TestPlan struct {
	TestPlanSpec

	// is active
	// Read Only: true
	IsActive *bool `json:"isActive,omitempty"`

	// key
	Key JiraKey `json:"key,omitempty"`

	// status
	Status TestPlanStatusEnum `json:"status,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TestPlan) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TestPlanSpec
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TestPlanSpec = aO0

	// AO1
	var dataAO1 struct {
		IsActive *bool `json:"isActive,omitempty"`

		Key JiraKey `json:"key,omitempty"`

		Status TestPlanStatusEnum `json:"status,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.IsActive = dataAO1.IsActive

	m.Key = dataAO1.Key

	m.Status = dataAO1.Status

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TestPlan) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TestPlanSpec)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		IsActive *bool `json:"isActive,omitempty"`

		Key JiraKey `json:"key,omitempty"`

		Status TestPlanStatusEnum `json:"status,omitempty"`
	}

	dataAO1.IsActive = m.IsActive

	dataAO1.Key = m.Key

	dataAO1.Status = m.Status

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this test plan
func (m *TestPlan) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestPlanSpec
	if err := m.TestPlanSpec.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestPlan) validateKey(formats strfmt.Registry) error {

	if swag.IsZero(m.Key) { // not required
		return nil
	}

	if err := m.Key.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("key")
		}
		return err
	}

	return nil
}

func (m *TestPlan) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this test plan based on the context it is used
func (m *TestPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestPlanSpec
	if err := m.TestPlanSpec.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestPlan) contextValidateIsActive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isActive", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *TestPlan) contextValidateKey(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Key.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("key")
		}
		return err
	}

	return nil
}

func (m *TestPlan) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestPlan) UnmarshalBinary(b []byte) error {
	var res TestPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
