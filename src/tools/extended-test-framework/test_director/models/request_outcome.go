// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestOutcome request outcome
//
// swagger:model RequestOutcome
type RequestOutcome struct {

	// details
	// Example: reason(s) why the request cannot be handled
	Details string `json:"details,omitempty"`

	// number of items affected (e.g.) by the request
	// Minimum: 0
	ItemsAffected *int64 `json:"items_affected,omitempty"`

	// result
	// Enum: [REFUSED OK]
	Result string `json:"result,omitempty"`
}

// Validate validates this request outcome
func (m *RequestOutcome) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemsAffected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestOutcome) validateItemsAffected(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemsAffected) { // not required
		return nil
	}

	if err := validate.MinimumInt("items_affected", "body", *m.ItemsAffected, 0, false); err != nil {
		return err
	}

	return nil
}

var requestOutcomeTypeResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REFUSED","OK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestOutcomeTypeResultPropEnum = append(requestOutcomeTypeResultPropEnum, v)
	}
}

const (

	// RequestOutcomeResultREFUSED captures enum value "REFUSED"
	RequestOutcomeResultREFUSED string = "REFUSED"

	// RequestOutcomeResultOK captures enum value "OK"
	RequestOutcomeResultOK string = "OK"
)

// prop value enum
func (m *RequestOutcome) validateResultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestOutcomeTypeResultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RequestOutcome) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	// value enum
	if err := m.validateResultEnum("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this request outcome based on context it is used
func (m *RequestOutcome) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestOutcome) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestOutcome) UnmarshalBinary(b []byte) error {
	var res RequestOutcome
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
