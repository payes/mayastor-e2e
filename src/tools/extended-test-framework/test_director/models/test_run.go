// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestRun test run
//
// swagger:model TestRun
type TestRun struct {

	// Test Run End Time
	// Format: date-time
	EndDateTime strfmt.DateTime `json:"endDateTime,omitempty"`

	// Test Run unqiue identifer
	ID string `json:"id,omitempty"`

	// Test Run Start Time
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"startDateTime,omitempty"`

	TestRunSpec
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TestRun) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		EndDateTime strfmt.DateTime `json:"endDateTime,omitempty"`

		ID string `json:"id,omitempty"`

		StartDateTime strfmt.DateTime `json:"startDateTime,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.EndDateTime = dataAO0.EndDateTime

	m.ID = dataAO0.ID

	m.StartDateTime = dataAO0.StartDateTime

	// AO1
	var aO1 TestRunSpec
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.TestRunSpec = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TestRun) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		EndDateTime strfmt.DateTime `json:"endDateTime,omitempty"`

		ID string `json:"id,omitempty"`

		StartDateTime strfmt.DateTime `json:"startDateTime,omitempty"`
	}

	dataAO0.EndDateTime = m.EndDateTime

	dataAO0.ID = m.ID

	dataAO0.StartDateTime = m.StartDateTime

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.TestRunSpec)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this test run
func (m *TestRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with TestRunSpec
	if err := m.TestRunSpec.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestRun) validateEndDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TestRun) validateStartDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this test run based on the context it is used
func (m *TestRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TestRunSpec
	if err := m.TestRunSpec.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TestRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestRun) UnmarshalBinary(b []byte) error {
	var res TestRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
