// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "MayaData System Test Framework API",
    "title": "Test Framework API",
    "version": "1.0.1"
  },
  "basePath": "/api/v1",
  "paths": {
    "/td/events": {
      "get": {
        "tags": [
          "test-director"
        ],
        "summary": "returns events raised with the Director",
        "operationId": "GetEvents",
        "parameters": [
          {
            "$ref": "#/parameters/EventClassEnumQueryParam"
          },
          {
            "$ref": "#/parameters/EventSourceClassEnumQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Event(s) returned to caller",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "404": {
            "description": "no corresponding event(s) exist"
          }
        }
      },
      "post": {
        "tags": [
          "test-director"
        ],
        "summary": "logs a new event with the Director",
        "operationId": "AddEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event was logged and returned to caller",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Bad request (malformed/invalid body content)",
            "schema": {
              "$ref": "#/definitions/RequestOutcome"
            }
          }
        }
      }
    },
    "/td/testRuns": {
      "get": {
        "tags": [
          "test-director"
        ],
        "summary": "returns a list of Test Runs registered with the Director",
        "operationId": "GetTestRuns",
        "responses": {
          "200": {
            "description": "Test object(s) returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestRun"
              }
            }
          },
          "404": {
            "description": "no matching Test(s) found"
          }
        }
      }
    },
    "/td/testplans": {
      "get": {
        "tags": [
          "test-director"
        ],
        "summary": "returns a list of Test Plans registered with the director",
        "operationId": "GetTestPlans",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "if set true return only the default Test Plan",
            "name": "defaultPlanOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "search results available and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestPlan"
              }
            }
          },
          "404": {
            "description": "no matching Test Plan(s) found"
          }
        }
      },
      "delete": {
        "tags": [
          "test-director"
        ],
        "summary": "deletes all plans except the default plan",
        "operationId": "DeleteTestPlans",
        "responses": {
          "200": {
            "description": "Returns deleted Test Plan count, which may be zero",
            "schema": {
              "$ref": "#/definitions/RequestOutcome"
            }
          }
        }
      }
    },
    "/td/testplans/{id}": {
      "get": {
        "tags": [
          "test-director"
        ],
        "summary": "searches for a specific Test Plan by its id",
        "operationId": "GetTestPlanById",
        "parameters": [
          {
            "$ref": "#/parameters/JiraKeyPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Test Plan item returned",
            "schema": {
              "$ref": "#/definitions/TestPlan"
            }
          },
          "404": {
            "description": "no matching Test Plan found"
          }
        }
      },
      "put": {
        "tags": [
          "test-director"
        ],
        "summary": "registers or updates a Test Plan with the director",
        "operationId": "PutTestPlanById",
        "parameters": [
          {
            "$ref": "#/parameters/JiraKeyPathParam"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestPlanSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test Plan was registered or updated",
            "schema": {
              "$ref": "#/definitions/TestPlan"
            }
          },
          "400": {
            "description": "Bad request (malformed/invalid body content)",
            "schema": {
              "$ref": "#/definitions/RequestOutcome"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "test-director"
        ],
        "summary": "searches for a specific Test Plan by its id",
        "operationId": "DeleteTestPlanById",
        "parameters": [
          {
            "$ref": "#/parameters/JiraKeyPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns deleted Test Plan",
            "schema": {
              "$ref": "#/definitions/TestPlan"
            }
          },
          "404": {
            "description": "no matching Test Plan found"
          }
        }
      }
    },
    "/td/testruns/{id}": {
      "get": {
        "tags": [
          "test-director"
        ],
        "summary": "returns a Test Run with the corresponding id",
        "operationId": "GetTestRunById",
        "parameters": [
          {
            "$ref": "#/parameters/JiraKeyPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A Test Run was returned to the caller",
            "schema": {
              "$ref": "#/definitions/TestRun"
            }
          },
          "404": {
            "description": "Test Run not found"
          }
        }
      },
      "put": {
        "tags": [
          "test-director"
        ],
        "summary": "register or update a Test Run with the Director",
        "operationId": "PutTestRunById",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Test Run id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestRunSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test Run Registered/Updated",
            "schema": {
              "$ref": "#/definitions/TestRun"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/RequestOutcome"
            }
          },
          "403": {
            "description": "The request was refused",
            "schema": {
              "$ref": "#/definitions/RequestOutcome"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "test-director"
        ],
        "summary": "returns a Test Run with the corresponding id",
        "operationId": "DeleteTestRunById",
        "parameters": [
          {
            "$ref": "#/parameters/JiraKeyPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deleted Test Run",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestRun"
              }
            }
          },
          "404": {
            "description": "Test Run not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Event": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "loggedDateTime": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        {
          "$ref": "#/definitions/EventSpec"
        }
      ]
    },
    "EventClassEnum": {
      "type": "string",
      "enum": [
        "FAIL",
        "INFO",
        "WARN"
      ]
    },
    "EventSourceClassEnum": {
      "type": "string",
      "enum": [
        "workload-monitor",
        "log-monitor",
        "resouce-monitor"
      ]
    },
    "EventSpec": {
      "type": "object",
      "required": [
        "sourceClass",
        "sourceInstance",
        "class",
        "message"
      ],
      "properties": {
        "class": {
          "$ref": "#/definitions/EventClassEnum"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "sourceClass": {
          "$ref": "#/definitions/EventSourceClassEnum"
        },
        "sourceInstance": {
          "type": "string"
        }
      }
    },
    "JiraKey": {
      "type": "string",
      "format": "Jira issue key",
      "pattern": "^[A-Z]{2,3}-\\d{1,4}$",
      "example": "MQ-123"
    },
    "RequestOutcome": {
      "type": "object",
      "properties": {
        "details": {
          "type": "string",
          "example": "reason(s) why the request cannot be handled"
        },
        "items_affected": {
          "description": "number of items affected (e.g.) by the request",
          "type": "integer",
          "format": "int64"
        },
        "result": {
          "type": "string",
          "enum": [
            "REFUSED",
            "OK"
          ]
        }
      }
    },
    "TestPlan": {
      "allOf": [
        {
          "$ref": "#/definitions/TestPlanSpec"
        },
        {
          "type": "object",
          "properties": {
            "isActive": {
              "type": "boolean",
              "readOnly": true
            },
            "key": {
              "$ref": "#/definitions/JiraKey"
            },
            "status": {
              "$ref": "#/definitions/TestPlanStatusEnum"
            }
          }
        }
      ],
      "additionalProperties": false
    },
    "TestPlanSpec": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "display name",
          "type": "string",
          "example": "Nightly Stable Test Plan"
        }
      }
    },
    "TestPlanStatusEnum": {
      "type": "string",
      "enum": [
        "NOT_STARTED",
        "RUNNING",
        "COMPLETE_PASS",
        "COMPLETE_FAIL"
      ],
      "readOnly": true
    },
    "TestRun": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "endDateTime": {
              "description": "Test Run End Time",
              "type": "string",
              "format": "date-time"
            },
            "id": {
              "description": "Test Run unqiue identifer (pod metadata.uid)",
              "type": "string",
              "format": "uuid"
            },
            "startDateTime": {
              "description": "Test Run Start Time",
              "type": "string",
              "format": "date-time"
            },
            "testPlanKey": {
              "$ref": "#/definitions/JiraKey"
            }
          }
        },
        {
          "$ref": "#/definitions/TestRunSpec"
        }
      ]
    },
    "TestRunSpec": {
      "type": "object",
      "required": [
        "testKey"
      ],
      "properties": {
        "data": {
          "description": "data field",
          "type": "string",
          "example": "e.g. description of test outcome"
        },
        "status": {
          "$ref": "#/definitions/TestRunStatusEnum"
        },
        "testKey": {
          "$ref": "#/definitions/JiraKey"
        }
      }
    },
    "TestRunStatusEnum": {
      "type": "string",
      "enum": [
        "NOT_STARTED",
        "RUNNING",
        "COMPLETE_PASS",
        "COMPLETE_FAIL"
      ]
    }
  },
  "parameters": {
    "EventClassEnumQueryParam": {
      "enum": [
        "FAIL",
        "INFO",
        "WARN"
      ],
      "type": "string",
      "description": "event class",
      "name": "class",
      "in": "query"
    },
    "EventSourceClassEnumQueryParam": {
      "enum": [
        "workload-monitor",
        "log-monitor",
        "resouce-monitor"
      ],
      "type": "string",
      "description": "source class",
      "name": "sourceClass",
      "in": "query"
    },
    "JiraKeyPathParam": {
      "pattern": "^[A-Z]{2,3}-\\d{1,4}$",
      "type": "string",
      "format": "Jira issue key",
      "description": "Test Plan Id",
      "name": "id",
      "in": "path",
      "required": true
    }
  },
  "tags": [
    {
      "description": "Test Director",
      "name": "test-director"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "MayaData System Test Framework API",
    "title": "Test Framework API",
    "version": "1.0.1"
  },
  "basePath": "/api/v1",
  "paths": {
    "/td/events": {
      "get": {
        "tags": [
          "test-director"
        ],
        "summary": "returns events raised with the Director",
        "operationId": "GetEvents",
        "parameters": [
          {
            "enum": [
              "FAIL",
              "INFO",
              "WARN"
            ],
            "type": "string",
            "description": "event class",
            "name": "class",
            "in": "query"
          },
          {
            "enum": [
              "workload-monitor",
              "log-monitor",
              "resouce-monitor"
            ],
            "type": "string",
            "description": "source class",
            "name": "sourceClass",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Event(s) returned to caller",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "404": {
            "description": "no corresponding event(s) exist"
          }
        }
      },
      "post": {
        "tags": [
          "test-director"
        ],
        "summary": "logs a new event with the Director",
        "operationId": "AddEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event was logged and returned to caller",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Bad request (malformed/invalid body content)",
            "schema": {
              "$ref": "#/definitions/RequestOutcome"
            }
          }
        }
      }
    },
    "/td/testRuns": {
      "get": {
        "tags": [
          "test-director"
        ],
        "summary": "returns a list of Test Runs registered with the Director",
        "operationId": "GetTestRuns",
        "responses": {
          "200": {
            "description": "Test object(s) returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestRun"
              }
            }
          },
          "404": {
            "description": "no matching Test(s) found"
          }
        }
      }
    },
    "/td/testplans": {
      "get": {
        "tags": [
          "test-director"
        ],
        "summary": "returns a list of Test Plans registered with the director",
        "operationId": "GetTestPlans",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "if set true return only the default Test Plan",
            "name": "defaultPlanOnly",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "search results available and returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestPlan"
              }
            }
          },
          "404": {
            "description": "no matching Test Plan(s) found"
          }
        }
      },
      "delete": {
        "tags": [
          "test-director"
        ],
        "summary": "deletes all plans except the default plan",
        "operationId": "DeleteTestPlans",
        "responses": {
          "200": {
            "description": "Returns deleted Test Plan count, which may be zero",
            "schema": {
              "$ref": "#/definitions/RequestOutcome"
            }
          }
        }
      }
    },
    "/td/testplans/{id}": {
      "get": {
        "tags": [
          "test-director"
        ],
        "summary": "searches for a specific Test Plan by its id",
        "operationId": "GetTestPlanById",
        "parameters": [
          {
            "pattern": "^[A-Z]{2,3}-\\d{1,4}$",
            "type": "string",
            "format": "Jira issue key",
            "description": "Test Plan Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Test Plan item returned",
            "schema": {
              "$ref": "#/definitions/TestPlan"
            }
          },
          "404": {
            "description": "no matching Test Plan found"
          }
        }
      },
      "put": {
        "tags": [
          "test-director"
        ],
        "summary": "registers or updates a Test Plan with the director",
        "operationId": "PutTestPlanById",
        "parameters": [
          {
            "pattern": "^[A-Z]{2,3}-\\d{1,4}$",
            "type": "string",
            "format": "Jira issue key",
            "description": "Test Plan Id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestPlanSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test Plan was registered or updated",
            "schema": {
              "$ref": "#/definitions/TestPlan"
            }
          },
          "400": {
            "description": "Bad request (malformed/invalid body content)",
            "schema": {
              "$ref": "#/definitions/RequestOutcome"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "test-director"
        ],
        "summary": "searches for a specific Test Plan by its id",
        "operationId": "DeleteTestPlanById",
        "parameters": [
          {
            "pattern": "^[A-Z]{2,3}-\\d{1,4}$",
            "type": "string",
            "format": "Jira issue key",
            "description": "Test Plan Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns deleted Test Plan",
            "schema": {
              "$ref": "#/definitions/TestPlan"
            }
          },
          "404": {
            "description": "no matching Test Plan found"
          }
        }
      }
    },
    "/td/testruns/{id}": {
      "get": {
        "tags": [
          "test-director"
        ],
        "summary": "returns a Test Run with the corresponding id",
        "operationId": "GetTestRunById",
        "parameters": [
          {
            "pattern": "^[A-Z]{2,3}-\\d{1,4}$",
            "type": "string",
            "format": "Jira issue key",
            "description": "Test Plan Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A Test Run was returned to the caller",
            "schema": {
              "$ref": "#/definitions/TestRun"
            }
          },
          "404": {
            "description": "Test Run not found"
          }
        }
      },
      "put": {
        "tags": [
          "test-director"
        ],
        "summary": "register or update a Test Run with the Director",
        "operationId": "PutTestRunById",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Test Run id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestRunSpec"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test Run Registered/Updated",
            "schema": {
              "$ref": "#/definitions/TestRun"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/RequestOutcome"
            }
          },
          "403": {
            "description": "The request was refused",
            "schema": {
              "$ref": "#/definitions/RequestOutcome"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "test-director"
        ],
        "summary": "returns a Test Run with the corresponding id",
        "operationId": "DeleteTestRunById",
        "parameters": [
          {
            "pattern": "^[A-Z]{2,3}-\\d{1,4}$",
            "type": "string",
            "format": "Jira issue key",
            "description": "Test Plan Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the deleted Test Run",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestRun"
              }
            }
          },
          "404": {
            "description": "Test Run not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Event": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "loggedDateTime": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        {
          "$ref": "#/definitions/EventSpec"
        }
      ]
    },
    "EventClassEnum": {
      "type": "string",
      "enum": [
        "FAIL",
        "INFO",
        "WARN"
      ]
    },
    "EventSourceClassEnum": {
      "type": "string",
      "enum": [
        "workload-monitor",
        "log-monitor",
        "resouce-monitor"
      ]
    },
    "EventSpec": {
      "type": "object",
      "required": [
        "sourceClass",
        "sourceInstance",
        "class",
        "message"
      ],
      "properties": {
        "class": {
          "$ref": "#/definitions/EventClassEnum"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "sourceClass": {
          "$ref": "#/definitions/EventSourceClassEnum"
        },
        "sourceInstance": {
          "type": "string"
        }
      }
    },
    "JiraKey": {
      "type": "string",
      "format": "Jira issue key",
      "pattern": "^[A-Z]{2,3}-\\d{1,4}$",
      "example": "MQ-123"
    },
    "RequestOutcome": {
      "type": "object",
      "properties": {
        "details": {
          "type": "string",
          "example": "reason(s) why the request cannot be handled"
        },
        "items_affected": {
          "description": "number of items affected (e.g.) by the request",
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "result": {
          "type": "string",
          "enum": [
            "REFUSED",
            "OK"
          ]
        }
      }
    },
    "TestPlan": {
      "allOf": [
        {
          "$ref": "#/definitions/TestPlanSpec"
        },
        {
          "type": "object",
          "properties": {
            "isActive": {
              "type": "boolean",
              "readOnly": true
            },
            "key": {
              "$ref": "#/definitions/JiraKey"
            },
            "status": {
              "$ref": "#/definitions/TestPlanStatusEnum"
            }
          }
        }
      ],
      "additionalProperties": false
    },
    "TestPlanSpec": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "display name",
          "type": "string",
          "example": "Nightly Stable Test Plan"
        }
      }
    },
    "TestPlanStatusEnum": {
      "type": "string",
      "enum": [
        "NOT_STARTED",
        "RUNNING",
        "COMPLETE_PASS",
        "COMPLETE_FAIL"
      ],
      "readOnly": true
    },
    "TestRun": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "endDateTime": {
              "description": "Test Run End Time",
              "type": "string",
              "format": "date-time"
            },
            "id": {
              "description": "Test Run unqiue identifer (pod metadata.uid)",
              "type": "string",
              "format": "uuid"
            },
            "startDateTime": {
              "description": "Test Run Start Time",
              "type": "string",
              "format": "date-time"
            },
            "testPlanKey": {
              "$ref": "#/definitions/JiraKey"
            }
          }
        },
        {
          "$ref": "#/definitions/TestRunSpec"
        }
      ]
    },
    "TestRunSpec": {
      "type": "object",
      "required": [
        "testKey"
      ],
      "properties": {
        "data": {
          "description": "data field",
          "type": "string",
          "example": "e.g. description of test outcome"
        },
        "status": {
          "$ref": "#/definitions/TestRunStatusEnum"
        },
        "testKey": {
          "$ref": "#/definitions/JiraKey"
        }
      }
    },
    "TestRunStatusEnum": {
      "type": "string",
      "enum": [
        "NOT_STARTED",
        "RUNNING",
        "COMPLETE_PASS",
        "COMPLETE_FAIL"
      ]
    }
  },
  "parameters": {
    "EventClassEnumQueryParam": {
      "enum": [
        "FAIL",
        "INFO",
        "WARN"
      ],
      "type": "string",
      "description": "event class",
      "name": "class",
      "in": "query"
    },
    "EventSourceClassEnumQueryParam": {
      "enum": [
        "workload-monitor",
        "log-monitor",
        "resouce-monitor"
      ],
      "type": "string",
      "description": "source class",
      "name": "sourceClass",
      "in": "query"
    },
    "JiraKeyPathParam": {
      "pattern": "^[A-Z]{2,3}-\\d{1,4}$",
      "type": "string",
      "format": "Jira issue key",
      "description": "Test Plan Id",
      "name": "id",
      "in": "path",
      "required": true
    }
  },
  "tags": [
    {
      "description": "Test Director",
      "name": "test-director"
    }
  ]
}`))
}
