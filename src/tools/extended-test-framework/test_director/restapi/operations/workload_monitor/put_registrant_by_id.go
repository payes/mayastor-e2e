// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutRegistrantByIDHandlerFunc turns a function with the right signature into a put registrant by Id handler
type PutRegistrantByIDHandlerFunc func(PutRegistrantByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutRegistrantByIDHandlerFunc) Handle(params PutRegistrantByIDParams) middleware.Responder {
	return fn(params)
}

// PutRegistrantByIDHandler interface for that can handle valid put registrant by Id params
type PutRegistrantByIDHandler interface {
	Handle(PutRegistrantByIDParams) middleware.Responder
}

// NewPutRegistrantByID creates a new http.Handler for the put registrant by Id operation
func NewPutRegistrantByID(ctx *middleware.Context, handler PutRegistrantByIDHandler) *PutRegistrantByID {
	return &PutRegistrantByID{Context: ctx, Handler: handler}
}

/* PutRegistrantByID swagger:route PUT /wm/registrants/{rid} workload-monitor putRegistrantById

registers or updates a registrant

*/
type PutRegistrantByID struct {
	Context *middleware.Context
	Handler PutRegistrantByIDHandler
}

func (o *PutRegistrantByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutRegistrantByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
