// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mayastor-e2e/tools/extended-test-framework/test_director/models"
)

// PutRegistrantOKCode is the HTTP code returned for type PutRegistrantOK
const PutRegistrantOKCode int = 200

/*PutRegistrantOK registrant was registered or updated

swagger:response putRegistrantOK
*/
type PutRegistrantOK struct {

	/*
	  In: Body
	*/
	Payload *models.Registrant `json:"body,omitempty"`
}

// NewPutRegistrantOK creates PutRegistrantOK with default headers values
func NewPutRegistrantOK() *PutRegistrantOK {

	return &PutRegistrantOK{}
}

// WithPayload adds the payload to the put registrant o k response
func (o *PutRegistrantOK) WithPayload(payload *models.Registrant) *PutRegistrantOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put registrant o k response
func (o *PutRegistrantOK) SetPayload(payload *models.Registrant) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutRegistrantOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutRegistrantBadRequestCode is the HTTP code returned for type PutRegistrantBadRequest
const PutRegistrantBadRequestCode int = 400

/*PutRegistrantBadRequest Bad request (malformed/invalid body content)

swagger:response putRegistrantBadRequest
*/
type PutRegistrantBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.RequestOutcome `json:"body,omitempty"`
}

// NewPutRegistrantBadRequest creates PutRegistrantBadRequest with default headers values
func NewPutRegistrantBadRequest() *PutRegistrantBadRequest {

	return &PutRegistrantBadRequest{}
}

// WithPayload adds the payload to the put registrant bad request response
func (o *PutRegistrantBadRequest) WithPayload(payload *models.RequestOutcome) *PutRegistrantBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put registrant bad request response
func (o *PutRegistrantBadRequest) SetPayload(payload *models.RequestOutcome) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutRegistrantBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
