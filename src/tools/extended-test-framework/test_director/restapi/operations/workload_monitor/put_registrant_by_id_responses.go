// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mayastor-e2e/tools/extended-test-framework/test_director/models"
)

// PutRegistrantByIDOKCode is the HTTP code returned for type PutRegistrantByIDOK
const PutRegistrantByIDOKCode int = 200

/*PutRegistrantByIDOK Test Plan was registered or updated

swagger:response putRegistrantByIdOK
*/
type PutRegistrantByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.TestPlan `json:"body,omitempty"`
}

// NewPutRegistrantByIDOK creates PutRegistrantByIDOK with default headers values
func NewPutRegistrantByIDOK() *PutRegistrantByIDOK {

	return &PutRegistrantByIDOK{}
}

// WithPayload adds the payload to the put registrant by Id o k response
func (o *PutRegistrantByIDOK) WithPayload(payload *models.TestPlan) *PutRegistrantByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put registrant by Id o k response
func (o *PutRegistrantByIDOK) SetPayload(payload *models.TestPlan) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutRegistrantByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutRegistrantByIDBadRequestCode is the HTTP code returned for type PutRegistrantByIDBadRequest
const PutRegistrantByIDBadRequestCode int = 400

/*PutRegistrantByIDBadRequest Bad request (malformed/invalid body content)

swagger:response putRegistrantByIdBadRequest
*/
type PutRegistrantByIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.RequestOutcome `json:"body,omitempty"`
}

// NewPutRegistrantByIDBadRequest creates PutRegistrantByIDBadRequest with default headers values
func NewPutRegistrantByIDBadRequest() *PutRegistrantByIDBadRequest {

	return &PutRegistrantByIDBadRequest{}
}

// WithPayload adds the payload to the put registrant by Id bad request response
func (o *PutRegistrantByIDBadRequest) WithPayload(payload *models.RequestOutcome) *PutRegistrantByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put registrant by Id bad request response
func (o *PutRegistrantByIDBadRequest) SetPayload(payload *models.RequestOutcome) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutRegistrantByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
