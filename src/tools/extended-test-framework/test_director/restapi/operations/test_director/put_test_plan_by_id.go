// Code generated by go-swagger; DO NOT EDIT.

package test_director

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutTestPlanByIDHandlerFunc turns a function with the right signature into a put test plan by Id handler
type PutTestPlanByIDHandlerFunc func(PutTestPlanByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTestPlanByIDHandlerFunc) Handle(params PutTestPlanByIDParams) middleware.Responder {
	return fn(params)
}

// PutTestPlanByIDHandler interface for that can handle valid put test plan by Id params
type PutTestPlanByIDHandler interface {
	Handle(PutTestPlanByIDParams) middleware.Responder
}

// NewPutTestPlanByID creates a new http.Handler for the put test plan by Id operation
func NewPutTestPlanByID(ctx *middleware.Context, handler PutTestPlanByIDHandler) *PutTestPlanByID {
	return &PutTestPlanByID{Context: ctx, Handler: handler}
}

/* PutTestPlanByID swagger:route PUT /td/testplans/{id} test-director putTestPlanById

registers or updates a Test Plan with the director

*/
type PutTestPlanByID struct {
	Context *middleware.Context
	Handler PutTestPlanByIDHandler
}

func (o *PutTestPlanByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutTestPlanByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
