// Code generated by go-swagger; DO NOT EDIT.

package test_director

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutTestRunByIDHandlerFunc turns a function with the right signature into a put test run by Id handler
type PutTestRunByIDHandlerFunc func(PutTestRunByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTestRunByIDHandlerFunc) Handle(params PutTestRunByIDParams) middleware.Responder {
	return fn(params)
}

// PutTestRunByIDHandler interface for that can handle valid put test run by Id params
type PutTestRunByIDHandler interface {
	Handle(PutTestRunByIDParams) middleware.Responder
}

// NewPutTestRunByID creates a new http.Handler for the put test run by Id operation
func NewPutTestRunByID(ctx *middleware.Context, handler PutTestRunByIDHandler) *PutTestRunByID {
	return &PutTestRunByID{Context: ctx, Handler: handler}
}

/* PutTestRunByID swagger:route PUT /td/testruns/{id} test-director putTestRunById

register or update a Test Run with the Director

*/
type PutTestRunByID struct {
	Context *middleware.Context
	Handler PutTestRunByIDHandler
}

func (o *PutTestRunByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutTestRunByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
