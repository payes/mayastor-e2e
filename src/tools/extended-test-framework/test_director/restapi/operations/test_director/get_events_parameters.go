// Code generated by go-swagger; DO NOT EDIT.

package test_director

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetEventsParams creates a new GetEventsParams object
//
// There are no default values defined in the spec.
func NewGetEventsParams() GetEventsParams {

	return GetEventsParams{}
}

// GetEventsParams contains all the bound params for the get events operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetEvents
type GetEventsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*event class
	  In: query
	*/
	Class *string
	/*source class
	  In: query
	*/
	SourceClass *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetEventsParams() beforehand.
func (o *GetEventsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qClass, qhkClass, _ := qs.GetOK("class")
	if err := o.bindClass(qClass, qhkClass, route.Formats); err != nil {
		res = append(res, err)
	}

	qSourceClass, qhkSourceClass, _ := qs.GetOK("sourceClass")
	if err := o.bindSourceClass(qSourceClass, qhkSourceClass, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClass binds and validates parameter Class from query.
func (o *GetEventsParams) bindClass(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Class = &raw

	if err := o.validateClass(formats); err != nil {
		return err
	}

	return nil
}

// validateClass carries on validations for parameter Class
func (o *GetEventsParams) validateClass(formats strfmt.Registry) error {

	if err := validate.EnumCase("class", "query", *o.Class, []interface{}{"FAIL", "INFO", "WARN"}, true); err != nil {
		return err
	}

	return nil
}

// bindSourceClass binds and validates parameter SourceClass from query.
func (o *GetEventsParams) bindSourceClass(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SourceClass = &raw

	if err := o.validateSourceClass(formats); err != nil {
		return err
	}

	return nil
}

// validateSourceClass carries on validations for parameter SourceClass
func (o *GetEventsParams) validateSourceClass(formats strfmt.Registry) error {

	if err := validate.EnumCase("sourceClass", "query", *o.SourceClass, []interface{}{"workload-monitor", "log-monitor", "resouce-monitor"}, true); err != nil {
		return err
	}

	return nil
}
