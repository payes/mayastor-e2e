// Code generated by go-swagger; DO NOT EDIT.

package test_director

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTestRunsHandlerFunc turns a function with the right signature into a get test runs handler
type GetTestRunsHandlerFunc func(GetTestRunsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTestRunsHandlerFunc) Handle(params GetTestRunsParams) middleware.Responder {
	return fn(params)
}

// GetTestRunsHandler interface for that can handle valid get test runs params
type GetTestRunsHandler interface {
	Handle(GetTestRunsParams) middleware.Responder
}

// NewGetTestRuns creates a new http.Handler for the get test runs operation
func NewGetTestRuns(ctx *middleware.Context, handler GetTestRunsHandler) *GetTestRuns {
	return &GetTestRuns{Context: ctx, Handler: handler}
}

/* GetTestRuns swagger:route GET /td/testRuns test-director getTestRuns

returns a list of Test Runs registered with the Director

*/
type GetTestRuns struct {
	Context *middleware.Context
	Handler GetTestRunsHandler
}

func (o *GetTestRuns) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTestRunsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
