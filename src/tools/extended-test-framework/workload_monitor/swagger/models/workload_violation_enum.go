// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WorkloadViolationEnum workload violation enum
//
// swagger:model WorkloadViolationEnum
type WorkloadViolationEnum string

func NewWorkloadViolationEnum(value WorkloadViolationEnum) *WorkloadViolationEnum {
	v := value
	return &v
}

const (

	// WorkloadViolationEnumRESTARTED captures enum value "RESTARTED"
	WorkloadViolationEnumRESTARTED WorkloadViolationEnum = "RESTARTED"

	// WorkloadViolationEnumTERMINATED captures enum value "TERMINATED"
	WorkloadViolationEnumTERMINATED WorkloadViolationEnum = "TERMINATED"

	// WorkloadViolationEnumNOTPRESENT captures enum value "NOT_PRESENT"
	WorkloadViolationEnumNOTPRESENT WorkloadViolationEnum = "NOT_PRESENT"
)

// for schema
var workloadViolationEnumEnum []interface{}

func init() {
	var res []WorkloadViolationEnum
	if err := json.Unmarshal([]byte(`["RESTARTED","TERMINATED","NOT_PRESENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workloadViolationEnumEnum = append(workloadViolationEnumEnum, v)
	}
}

func (m WorkloadViolationEnum) validateWorkloadViolationEnumEnum(path, location string, value WorkloadViolationEnum) error {
	if err := validate.EnumCase(path, location, value, workloadViolationEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this workload violation enum
func (m WorkloadViolationEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWorkloadViolationEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this workload violation enum based on context it is used
func (m WorkloadViolationEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
