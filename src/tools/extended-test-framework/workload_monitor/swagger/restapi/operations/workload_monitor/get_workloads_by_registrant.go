// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWorkloadsByRegistrantHandlerFunc turns a function with the right signature into a get workloads by registrant handler
type GetWorkloadsByRegistrantHandlerFunc func(GetWorkloadsByRegistrantParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWorkloadsByRegistrantHandlerFunc) Handle(params GetWorkloadsByRegistrantParams) middleware.Responder {
	return fn(params)
}

// GetWorkloadsByRegistrantHandler interface for that can handle valid get workloads by registrant params
type GetWorkloadsByRegistrantHandler interface {
	Handle(GetWorkloadsByRegistrantParams) middleware.Responder
}

// NewGetWorkloadsByRegistrant creates a new http.Handler for the get workloads by registrant operation
func NewGetWorkloadsByRegistrant(ctx *middleware.Context, handler GetWorkloadsByRegistrantHandler) *GetWorkloadsByRegistrant {
	return &GetWorkloadsByRegistrant{Context: ctx, Handler: handler}
}

/* GetWorkloadsByRegistrant swagger:route GET /wm/registrants/{rid} workload-monitor getWorkloadsByRegistrant

returns all workloads registered by the specified registrant

*/
type GetWorkloadsByRegistrant struct {
	Context *middleware.Context
	Handler GetWorkloadsByRegistrantHandler
}

func (o *GetWorkloadsByRegistrant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWorkloadsByRegistrantParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
