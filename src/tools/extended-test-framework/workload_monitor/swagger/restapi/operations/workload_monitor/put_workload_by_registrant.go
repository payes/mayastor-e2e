// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutWorkloadByRegistrantHandlerFunc turns a function with the right signature into a put workload by registrant handler
type PutWorkloadByRegistrantHandlerFunc func(PutWorkloadByRegistrantParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutWorkloadByRegistrantHandlerFunc) Handle(params PutWorkloadByRegistrantParams) middleware.Responder {
	return fn(params)
}

// PutWorkloadByRegistrantHandler interface for that can handle valid put workload by registrant params
type PutWorkloadByRegistrantHandler interface {
	Handle(PutWorkloadByRegistrantParams) middleware.Responder
}

// NewPutWorkloadByRegistrant creates a new http.Handler for the put workload by registrant operation
func NewPutWorkloadByRegistrant(ctx *middleware.Context, handler PutWorkloadByRegistrantHandler) *PutWorkloadByRegistrant {
	return &PutWorkloadByRegistrant{Context: ctx, Handler: handler}
}

/* PutWorkloadByRegistrant swagger:route PUT /wm/registrants/{rid}/workloads/{wid} workload-monitor putWorkloadByRegistrant

Creates/Updates a workload registration for a specific registratant

*/
type PutWorkloadByRegistrant struct {
	Context *middleware.Context
	Handler PutWorkloadByRegistrantHandler
}

func (o *PutWorkloadByRegistrant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutWorkloadByRegistrantParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
