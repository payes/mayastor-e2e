// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetWorkloadsParams creates a new GetWorkloadsParams object
//
// There are no default values defined in the spec.
func NewGetWorkloadsParams() GetWorkloadsParams {

	return GetWorkloadsParams{}
}

// GetWorkloadsParams contains all the bound params for the get workloads operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetWorkloads
type GetWorkloadsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*workload (pod) name
	  In: query
	*/
	Name *string
	/*workload (pod) namespace
	  In: query
	*/
	Namespace *string
	/*metadata.uid of Pod which registered the workload
	  In: query
	*/
	RegistrantID *strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetWorkloadsParams() beforehand.
func (o *GetWorkloadsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qNamespace, qhkNamespace, _ := qs.GetOK("namespace")
	if err := o.bindNamespace(qNamespace, qhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	qRegistrantID, qhkRegistrantID, _ := qs.GetOK("registrantId")
	if err := o.bindRegistrantID(qRegistrantID, qhkRegistrantID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindName binds and validates parameter Name from query.
func (o *GetWorkloadsParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Name = &raw

	return nil
}

// bindNamespace binds and validates parameter Namespace from query.
func (o *GetWorkloadsParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Namespace = &raw

	return nil
}

// bindRegistrantID binds and validates parameter RegistrantID from query.
func (o *GetWorkloadsParams) bindRegistrantID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("registrantId", "query", "strfmt.UUID", raw)
	}
	o.RegistrantID = (value.(*strfmt.UUID))

	if err := o.validateRegistrantID(formats); err != nil {
		return err
	}

	return nil
}

// validateRegistrantID carries on validations for parameter RegistrantID
func (o *GetWorkloadsParams) validateRegistrantID(formats strfmt.Registry) error {

	if err := validate.FormatOf("registrantId", "query", "uuid", o.RegistrantID.String(), formats); err != nil {
		return err
	}
	return nil
}
