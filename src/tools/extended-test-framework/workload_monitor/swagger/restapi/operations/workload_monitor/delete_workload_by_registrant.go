// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteWorkloadByRegistrantHandlerFunc turns a function with the right signature into a delete workload by registrant handler
type DeleteWorkloadByRegistrantHandlerFunc func(DeleteWorkloadByRegistrantParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteWorkloadByRegistrantHandlerFunc) Handle(params DeleteWorkloadByRegistrantParams) middleware.Responder {
	return fn(params)
}

// DeleteWorkloadByRegistrantHandler interface for that can handle valid delete workload by registrant params
type DeleteWorkloadByRegistrantHandler interface {
	Handle(DeleteWorkloadByRegistrantParams) middleware.Responder
}

// NewDeleteWorkloadByRegistrant creates a new http.Handler for the delete workload by registrant operation
func NewDeleteWorkloadByRegistrant(ctx *middleware.Context, handler DeleteWorkloadByRegistrantHandler) *DeleteWorkloadByRegistrant {
	return &DeleteWorkloadByRegistrant{Context: ctx, Handler: handler}
}

/* DeleteWorkloadByRegistrant swagger:route DELETE /wm/registrants/{rid}/workloads/{wid} workload-monitor deleteWorkloadByRegistrant

deletes a specific workload registration (identified  workload and registrant)

*/
type DeleteWorkloadByRegistrant struct {
	Context *middleware.Context
	Handler DeleteWorkloadByRegistrantHandler
}

func (o *DeleteWorkloadByRegistrant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteWorkloadByRegistrantParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
