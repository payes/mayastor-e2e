// Code generated by go-swagger; DO NOT EDIT.

package test_director

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"mayastor-e2e/tools/extended-test-framework/workload_monitor/models"
)

// PutTestRunByIDReader is a Reader for the PutTestRunByID structure.
type PutTestRunByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutTestRunByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutTestRunByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutTestRunByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutTestRunByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutTestRunByIDOK creates a PutTestRunByIDOK with default headers values
func NewPutTestRunByIDOK() *PutTestRunByIDOK {
	return &PutTestRunByIDOK{}
}

/* PutTestRunByIDOK describes a response with status code 200, with default header values.

Test Run Registered/Updated
*/
type PutTestRunByIDOK struct {
	Payload *models.TestRun
}

func (o *PutTestRunByIDOK) Error() string {
	return fmt.Sprintf("[PUT /td/testruns/{id}][%d] putTestRunByIdOK  %+v", 200, o.Payload)
}
func (o *PutTestRunByIDOK) GetPayload() *models.TestRun {
	return o.Payload
}

func (o *PutTestRunByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TestRun)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTestRunByIDBadRequest creates a PutTestRunByIDBadRequest with default headers values
func NewPutTestRunByIDBadRequest() *PutTestRunByIDBadRequest {
	return &PutTestRunByIDBadRequest{}
}

/* PutTestRunByIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutTestRunByIDBadRequest struct {
	Payload *models.RequestOutcome
}

func (o *PutTestRunByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /td/testruns/{id}][%d] putTestRunByIdBadRequest  %+v", 400, o.Payload)
}
func (o *PutTestRunByIDBadRequest) GetPayload() *models.RequestOutcome {
	return o.Payload
}

func (o *PutTestRunByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestOutcome)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTestRunByIDForbidden creates a PutTestRunByIDForbidden with default headers values
func NewPutTestRunByIDForbidden() *PutTestRunByIDForbidden {
	return &PutTestRunByIDForbidden{}
}

/* PutTestRunByIDForbidden describes a response with status code 403, with default header values.

The request was refused
*/
type PutTestRunByIDForbidden struct {
	Payload *models.RequestOutcome
}

func (o *PutTestRunByIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /td/testruns/{id}][%d] putTestRunByIdForbidden  %+v", 403, o.Payload)
}
func (o *PutTestRunByIDForbidden) GetPayload() *models.RequestOutcome {
	return o.Payload
}

func (o *PutTestRunByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestOutcome)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
