// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"mayastor-e2e/tools/extended-test-framework/workload_monitor/models"
)

// GetWorkloadByRegistrantReader is a Reader for the GetWorkloadByRegistrant structure.
type GetWorkloadByRegistrantReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkloadByRegistrantReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkloadByRegistrantOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWorkloadByRegistrantBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkloadByRegistrantNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetWorkloadByRegistrantOK creates a GetWorkloadByRegistrantOK with default headers values
func NewGetWorkloadByRegistrantOK() *GetWorkloadByRegistrantOK {
	return &GetWorkloadByRegistrantOK{}
}

/* GetWorkloadByRegistrantOK describes a response with status code 200, with default header values.

corresponding Workload item returned to caller
*/
type GetWorkloadByRegistrantOK struct {
	Payload *models.Workload
}

func (o *GetWorkloadByRegistrantOK) Error() string {
	return fmt.Sprintf("[GET /wm/registrants/{rid}/workloads/{wid}][%d] getWorkloadByRegistrantOK  %+v", 200, o.Payload)
}
func (o *GetWorkloadByRegistrantOK) GetPayload() *models.Workload {
	return o.Payload
}

func (o *GetWorkloadByRegistrantOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Workload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkloadByRegistrantBadRequest creates a GetWorkloadByRegistrantBadRequest with default headers values
func NewGetWorkloadByRegistrantBadRequest() *GetWorkloadByRegistrantBadRequest {
	return &GetWorkloadByRegistrantBadRequest{}
}

/* GetWorkloadByRegistrantBadRequest describes a response with status code 400, with default header values.

Bad request (malformed/invalid resource id)
*/
type GetWorkloadByRegistrantBadRequest struct {
	Payload *models.RequestOutcome
}

func (o *GetWorkloadByRegistrantBadRequest) Error() string {
	return fmt.Sprintf("[GET /wm/registrants/{rid}/workloads/{wid}][%d] getWorkloadByRegistrantBadRequest  %+v", 400, o.Payload)
}
func (o *GetWorkloadByRegistrantBadRequest) GetPayload() *models.RequestOutcome {
	return o.Payload
}

func (o *GetWorkloadByRegistrantBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestOutcome)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkloadByRegistrantNotFound creates a GetWorkloadByRegistrantNotFound with default headers values
func NewGetWorkloadByRegistrantNotFound() *GetWorkloadByRegistrantNotFound {
	return &GetWorkloadByRegistrantNotFound{}
}

/* GetWorkloadByRegistrantNotFound describes a response with status code 404, with default header values.

no corresponding workload found
*/
type GetWorkloadByRegistrantNotFound struct {
}

func (o *GetWorkloadByRegistrantNotFound) Error() string {
	return fmt.Sprintf("[GET /wm/registrants/{rid}/workloads/{wid}][%d] getWorkloadByRegistrantNotFound ", 404)
}

func (o *GetWorkloadByRegistrantNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
