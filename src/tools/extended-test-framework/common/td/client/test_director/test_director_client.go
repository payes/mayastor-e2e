// Code generated by go-swagger; DO NOT EDIT.

package test_director

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new test director API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for test director API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddEvent(params *AddEventParams, opts ...ClientOption) (*AddEventOK, error)

	DeleteTestPlanByID(params *DeleteTestPlanByIDParams, opts ...ClientOption) (*DeleteTestPlanByIDOK, error)

	DeleteTestPlans(params *DeleteTestPlansParams, opts ...ClientOption) (*DeleteTestPlansOK, error)

	DeleteTestRunByID(params *DeleteTestRunByIDParams, opts ...ClientOption) (*DeleteTestRunByIDOK, error)

	GetEvents(params *GetEventsParams, opts ...ClientOption) (*GetEventsOK, error)

	GetTestPlanByID(params *GetTestPlanByIDParams, opts ...ClientOption) (*GetTestPlanByIDOK, error)

	GetTestPlans(params *GetTestPlansParams, opts ...ClientOption) (*GetTestPlansOK, error)

	GetTestRunByID(params *GetTestRunByIDParams, opts ...ClientOption) (*GetTestRunByIDOK, error)

	GetTestRuns(params *GetTestRunsParams, opts ...ClientOption) (*GetTestRunsOK, error)

	PutTestPlanByID(params *PutTestPlanByIDParams, opts ...ClientOption) (*PutTestPlanByIDOK, error)

	PutTestRunByID(params *PutTestRunByIDParams, opts ...ClientOption) (*PutTestRunByIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddEvent logs a new event with the director
*/
func (a *Client) AddEvent(params *AddEventParams, opts ...ClientOption) (*AddEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddEvent",
		Method:             "POST",
		PathPattern:        "/td/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTestPlanByID searches for a specific test plan by its id
*/
func (a *Client) DeleteTestPlanByID(params *DeleteTestPlanByIDParams, opts ...ClientOption) (*DeleteTestPlanByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTestPlanByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTestPlanById",
		Method:             "DELETE",
		PathPattern:        "/td/testplans/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTestPlanByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTestPlanByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTestPlanById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTestPlans deletes all plans except the default plan
*/
func (a *Client) DeleteTestPlans(params *DeleteTestPlansParams, opts ...ClientOption) (*DeleteTestPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTestPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTestPlans",
		Method:             "DELETE",
		PathPattern:        "/td/testplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTestPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTestPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTestPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTestRunByID returns a test run with the corresponding id
*/
func (a *Client) DeleteTestRunByID(params *DeleteTestRunByIDParams, opts ...ClientOption) (*DeleteTestRunByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTestRunByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTestRunById",
		Method:             "DELETE",
		PathPattern:        "/td/testruns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTestRunByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTestRunByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTestRunById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEvents returns events raised with the director
*/
func (a *Client) GetEvents(params *GetEventsParams, opts ...ClientOption) (*GetEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEvents",
		Method:             "GET",
		PathPattern:        "/td/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTestPlanByID searches for a specific test plan by its id
*/
func (a *Client) GetTestPlanByID(params *GetTestPlanByIDParams, opts ...ClientOption) (*GetTestPlanByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestPlanByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTestPlanById",
		Method:             "GET",
		PathPattern:        "/td/testplans/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTestPlanByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestPlanByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTestPlanById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTestPlans returns a list of test plans registered with the director
*/
func (a *Client) GetTestPlans(params *GetTestPlansParams, opts ...ClientOption) (*GetTestPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTestPlans",
		Method:             "GET",
		PathPattern:        "/td/testplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTestPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTestPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTestRunByID returns a test run with the corresponding id
*/
func (a *Client) GetTestRunByID(params *GetTestRunByIDParams, opts ...ClientOption) (*GetTestRunByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestRunByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTestRunById",
		Method:             "GET",
		PathPattern:        "/td/testruns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTestRunByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestRunByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTestRunById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTestRuns returns a list of test runs registered with the director
*/
func (a *Client) GetTestRuns(params *GetTestRunsParams, opts ...ClientOption) (*GetTestRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTestRuns",
		Method:             "GET",
		PathPattern:        "/td/testRuns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTestRunsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTestRuns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutTestPlanByID registers or updates a test plan with the director
*/
func (a *Client) PutTestPlanByID(params *PutTestPlanByIDParams, opts ...ClientOption) (*PutTestPlanByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTestPlanByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutTestPlanById",
		Method:             "PUT",
		PathPattern:        "/td/testplans/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTestPlanByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutTestPlanByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutTestPlanById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutTestRunByID registers or update a test run with the director
*/
func (a *Client) PutTestRunByID(params *PutTestRunByIDParams, opts ...ClientOption) (*PutTestRunByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTestRunByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutTestRunById",
		Method:             "PUT",
		PathPattern:        "/td/testruns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTestRunByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutTestRunByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutTestRunById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
