// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EventSourceClassEnum event source class enum
//
// swagger:model EventSourceClassEnum
type EventSourceClassEnum string

func NewEventSourceClassEnum(value EventSourceClassEnum) *EventSourceClassEnum {
	v := value
	return &v
}

const (

	// EventSourceClassEnumWorkloadDashMonitor captures enum value "workload-monitor"
	EventSourceClassEnumWorkloadDashMonitor EventSourceClassEnum = "workload-monitor"

	// EventSourceClassEnumLogDashMonitor captures enum value "log-monitor"
	EventSourceClassEnumLogDashMonitor EventSourceClassEnum = "log-monitor"

	// EventSourceClassEnumResouceDashMonitor captures enum value "resouce-monitor"
	EventSourceClassEnumResouceDashMonitor EventSourceClassEnum = "resouce-monitor"

	// EventSourceClassEnumTestDashConductor captures enum value "test-conductor"
	EventSourceClassEnumTestDashConductor EventSourceClassEnum = "test-conductor"
)

// for schema
var eventSourceClassEnumEnum []interface{}

func init() {
	var res []EventSourceClassEnum
	if err := json.Unmarshal([]byte(`["workload-monitor","log-monitor","resouce-monitor","test-conductor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventSourceClassEnumEnum = append(eventSourceClassEnumEnum, v)
	}
}

func (m EventSourceClassEnum) validateEventSourceClassEnumEnum(path, location string, value EventSourceClassEnum) error {
	if err := validate.EnumCase(path, location, value, eventSourceClassEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this event source class enum
func (m EventSourceClassEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEventSourceClassEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this event source class enum based on context it is used
func (m EventSourceClassEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
