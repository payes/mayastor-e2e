// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventSpec event spec
//
// swagger:model EventSpec
type EventSpec struct {

	// class
	// Required: true
	Class *EventClassEnum `json:"class"`

	// data
	Data []string `json:"data"`

	// message
	// Required: true
	Message *string `json:"message"`

	// resource
	Resource string `json:"resource,omitempty"`

	// source class
	// Required: true
	SourceClass *EventSourceClassEnum `json:"sourceClass"`

	// source instance
	// Required: true
	SourceInstance *string `json:"sourceInstance"`
}

// Validate validates this event spec
func (m *EventSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceInstance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventSpec) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	if m.Class != nil {
		if err := m.Class.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("class")
			}
			return err
		}
	}

	return nil
}

func (m *EventSpec) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *EventSpec) validateSourceClass(formats strfmt.Registry) error {

	if err := validate.Required("sourceClass", "body", m.SourceClass); err != nil {
		return err
	}

	if err := validate.Required("sourceClass", "body", m.SourceClass); err != nil {
		return err
	}

	if m.SourceClass != nil {
		if err := m.SourceClass.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceClass")
			}
			return err
		}
	}

	return nil
}

func (m *EventSpec) validateSourceInstance(formats strfmt.Registry) error {

	if err := validate.Required("sourceInstance", "body", m.SourceInstance); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this event spec based on the context it is used
func (m *EventSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClass(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceClass(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventSpec) contextValidateClass(ctx context.Context, formats strfmt.Registry) error {

	if m.Class != nil {
		if err := m.Class.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("class")
			}
			return err
		}
	}

	return nil
}

func (m *EventSpec) contextValidateSourceClass(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceClass != nil {
		if err := m.SourceClass.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceClass")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventSpec) UnmarshalBinary(b []byte) error {
	var res EventSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
