// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workload monitor API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workload monitor API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteWorkloadByRegistrant(params *DeleteWorkloadByRegistrantParams, opts ...ClientOption) (*DeleteWorkloadByRegistrantOK, error)

	DeleteWorkloadsByRegistrant(params *DeleteWorkloadsByRegistrantParams, opts ...ClientOption) (*DeleteWorkloadsByRegistrantOK, error)

	GetWorkloadByRegistrant(params *GetWorkloadByRegistrantParams, opts ...ClientOption) (*GetWorkloadByRegistrantOK, error)

	GetWorkloads(params *GetWorkloadsParams, opts ...ClientOption) (*GetWorkloadsOK, error)

	GetWorkloadsByRegistrant(params *GetWorkloadsByRegistrantParams, opts ...ClientOption) (*GetWorkloadsByRegistrantOK, error)

	PutWorkloadByRegistrant(params *PutWorkloadByRegistrantParams, opts ...ClientOption) (*PutWorkloadByRegistrantOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteWorkloadByRegistrant deletes a specific workload registration identified workload and registrant
*/
func (a *Client) DeleteWorkloadByRegistrant(params *DeleteWorkloadByRegistrantParams, opts ...ClientOption) (*DeleteWorkloadByRegistrantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkloadByRegistrantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteWorkloadByRegistrant",
		Method:             "DELETE",
		PathPattern:        "/wm/registrants/{rid}/workloads/{wid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWorkloadByRegistrantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkloadByRegistrantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteWorkloadByRegistrant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteWorkloadsByRegistrant deletes all workloads registered by the specified registrant
*/
func (a *Client) DeleteWorkloadsByRegistrant(params *DeleteWorkloadsByRegistrantParams, opts ...ClientOption) (*DeleteWorkloadsByRegistrantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkloadsByRegistrantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteWorkloadsByRegistrant",
		Method:             "DELETE",
		PathPattern:        "/wm/registrants/{rid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWorkloadsByRegistrantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkloadsByRegistrantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteWorkloadsByRegistrant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkloadByRegistrant returns a specific workload registration identified workload and registrant
*/
func (a *Client) GetWorkloadByRegistrant(params *GetWorkloadByRegistrantParams, opts ...ClientOption) (*GetWorkloadByRegistrantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkloadByRegistrantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWorkloadByRegistrant",
		Method:             "GET",
		PathPattern:        "/wm/registrants/{rid}/workloads/{wid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkloadByRegistrantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkloadByRegistrantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkloadByRegistrant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkloads returns all workloads registered with the monitor
*/
func (a *Client) GetWorkloads(params *GetWorkloadsParams, opts ...ClientOption) (*GetWorkloadsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkloadsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWorkloads",
		Method:             "GET",
		PathPattern:        "/wm/workloads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkloadsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkloadsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkloads: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWorkloadsByRegistrant returns all workloads registered by the specified registrant
*/
func (a *Client) GetWorkloadsByRegistrant(params *GetWorkloadsByRegistrantParams, opts ...ClientOption) (*GetWorkloadsByRegistrantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkloadsByRegistrantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWorkloadsByRegistrant",
		Method:             "GET",
		PathPattern:        "/wm/registrants/{rid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkloadsByRegistrantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkloadsByRegistrantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkloadsByRegistrant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutWorkloadByRegistrant creates updates a workload registration for a specific registratant
*/
func (a *Client) PutWorkloadByRegistrant(params *PutWorkloadByRegistrantParams, opts ...ClientOption) (*PutWorkloadByRegistrantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWorkloadByRegistrantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutWorkloadByRegistrant",
		Method:             "PUT",
		PathPattern:        "/wm/registrants/{rid}/workloads/{wid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutWorkloadByRegistrantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutWorkloadByRegistrantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutWorkloadByRegistrant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
