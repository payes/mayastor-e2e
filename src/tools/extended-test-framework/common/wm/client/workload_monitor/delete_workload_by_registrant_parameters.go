// Code generated by go-swagger; DO NOT EDIT.

package workload_monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteWorkloadByRegistrantParams creates a new DeleteWorkloadByRegistrantParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteWorkloadByRegistrantParams() *DeleteWorkloadByRegistrantParams {
	return &DeleteWorkloadByRegistrantParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteWorkloadByRegistrantParamsWithTimeout creates a new DeleteWorkloadByRegistrantParams object
// with the ability to set a timeout on a request.
func NewDeleteWorkloadByRegistrantParamsWithTimeout(timeout time.Duration) *DeleteWorkloadByRegistrantParams {
	return &DeleteWorkloadByRegistrantParams{
		timeout: timeout,
	}
}

// NewDeleteWorkloadByRegistrantParamsWithContext creates a new DeleteWorkloadByRegistrantParams object
// with the ability to set a context for a request.
func NewDeleteWorkloadByRegistrantParamsWithContext(ctx context.Context) *DeleteWorkloadByRegistrantParams {
	return &DeleteWorkloadByRegistrantParams{
		Context: ctx,
	}
}

// NewDeleteWorkloadByRegistrantParamsWithHTTPClient creates a new DeleteWorkloadByRegistrantParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteWorkloadByRegistrantParamsWithHTTPClient(client *http.Client) *DeleteWorkloadByRegistrantParams {
	return &DeleteWorkloadByRegistrantParams{
		HTTPClient: client,
	}
}

/* DeleteWorkloadByRegistrantParams contains all the parameters to send to the API endpoint
   for the delete workload by registrant operation.

   Typically these are written to a http.Request.
*/
type DeleteWorkloadByRegistrantParams struct {

	/* Rid.

	   registrant uid

	   Format: uuid
	*/
	Rid strfmt.UUID

	/* Wid.

	   workload uid

	   Format: uuid
	*/
	Wid strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete workload by registrant params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteWorkloadByRegistrantParams) WithDefaults() *DeleteWorkloadByRegistrantParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete workload by registrant params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteWorkloadByRegistrantParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete workload by registrant params
func (o *DeleteWorkloadByRegistrantParams) WithTimeout(timeout time.Duration) *DeleteWorkloadByRegistrantParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete workload by registrant params
func (o *DeleteWorkloadByRegistrantParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete workload by registrant params
func (o *DeleteWorkloadByRegistrantParams) WithContext(ctx context.Context) *DeleteWorkloadByRegistrantParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete workload by registrant params
func (o *DeleteWorkloadByRegistrantParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete workload by registrant params
func (o *DeleteWorkloadByRegistrantParams) WithHTTPClient(client *http.Client) *DeleteWorkloadByRegistrantParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete workload by registrant params
func (o *DeleteWorkloadByRegistrantParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRid adds the rid to the delete workload by registrant params
func (o *DeleteWorkloadByRegistrantParams) WithRid(rid strfmt.UUID) *DeleteWorkloadByRegistrantParams {
	o.SetRid(rid)
	return o
}

// SetRid adds the rid to the delete workload by registrant params
func (o *DeleteWorkloadByRegistrantParams) SetRid(rid strfmt.UUID) {
	o.Rid = rid
}

// WithWid adds the wid to the delete workload by registrant params
func (o *DeleteWorkloadByRegistrantParams) WithWid(wid strfmt.UUID) *DeleteWorkloadByRegistrantParams {
	o.SetWid(wid)
	return o
}

// SetWid adds the wid to the delete workload by registrant params
func (o *DeleteWorkloadByRegistrantParams) SetWid(wid strfmt.UUID) {
	o.Wid = wid
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteWorkloadByRegistrantParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param rid
	if err := r.SetPathParam("rid", o.Rid.String()); err != nil {
		return err
	}

	// path param wid
	if err := r.SetPathParam("wid", o.Wid.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
