#!/usr/bin/env groovy

// On-demand E2E infra configuration
// https://mayadata.atlassian.net/wiki/spaces/MS/pages/247332965/Test+infrastructure#On-Demand-E2E-K8S-Clusters


def Common() {
    def common = load "./pipelines/common/common.groovy"
    return common
}

// Jenkins jobs to build and destroy clusters
if (params.platform == 'volterra') {
  e2e_build_cluster_job = 'k8s-build-cluster-volterra'
  e2e_destroy_cluster_job = 'k8s-destroy-cluster-volterra'
  // Environment to run e2e test in (job param of $e2e_build_cluster_job)
  e2e_environment = 'hcloud-volterra'
  e2e_script = 'volterra-e2e-test.sh'
} else {
  e2e_build_cluster_job = 'k8s-build-cluster'
  e2e_destroy_cluster_job = 'k8s-destroy-cluster'
  // Environment to run e2e test in (job param of $e2e_build_cluster_job)
  e2e_environment = 'hcloud-kubeadm'
  e2e_script = 'e2e-test.sh'
}

// Global variable to pass current k8s job between stages
def k8s_job=""

e2e_image_tag='nightly-stable'

if (params.e2e_branch != '') {
  e2e_mayastor_dir = 'mayastor-e2e'
  e2e_artifacts_dir = "${e2e_mayastor_dir}/artifacts"
} else {
  e2e_mayastor_dir = '.'
  e2e_artifacts_dir = "artifacts" // Jenkins doen't support paths starting with "./"
}
e2e_reports_dir = "${e2e_artifacts_dir}/reports"

pipeline {
  agent none
  options {
    timeout(time: 6, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '100', artifactNumToKeepStr: '100'))
  }
  parameters {
    string(defaultValue: '', name: 'tests', trim: true, description: 'comma or space separated list of tests to run, install test will always run before this tests by default')
    string(defaultValue: '1', name: 'iteraton', trim: true, description: 'number of times tests should run')
    booleanParam(defaultValue: true, name: 'uninstall_test', description: 'if true, uninstall test will be executed after above tests execution')
    choice(choices: ['', 'self_ci', 'hc1-nightly', 'nightly-stable', 'staging'], name: 'profile', description: 'profile, overrides tests')
    booleanParam(defaultValue: true, name: 'delete_cluster_on_failure', description: 'if false, failed tests will leave the cluster running')
    booleanParam(defaultValue: true, name: 'delete_cluster_on_success', description: 'if false, successful tests will leave the cluster running')
    choice(choices: ['generic', 'volterra'], name: 'platform', description: 'server platform')
    booleanParam(defaultValue: true, name: 'use_ci_registry', description: 'true to use the CI registry, false to pull images from DockerHub')
    string(defaultValue: e2e_image_tag, name: 'image_tag', trim: true, description: 'image tag of mayastor images, e.g. nightly-stable or selfci')
    string(defaultValue: '', name: 'config_path', trim: true, description: 'specify for non-default config file, e.g. selfci_config.yaml nightly_full_config.yaml or soak_config.yaml')
    string(defaultValue: '', name: 'e2e_branch', trim: true, description: 'specify for non-develop Mayastor-e2e branch to use')
  }
  stages {
    stage('test') {
      stages {
        stage('build e2e cluster') {
          agent { label 'nixos' }
          steps {
            script {
              k8s_job = Common().BuildCluster(e2e_build_cluster_job, e2e_environment)
            }
          }
        }
        stage('run e2e') {
          agent { label 'nixos' }
          environment {
            KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
          }
          steps {
            script {
              // if not using the branch this pipeline is associated with,
              // explicity clone and checkout the branch to use
              if (params.e2e_branch != '') {
                checkout([
                  $class: 'GitSCM',
                  branches: [[name: "*/${params.e2e_branch}"]],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [[
                    $class: 'RelativeTargetDirectory',
                    relativeTargetDir: "mayastor-e2e"
                  ]],
                  submoduleCfg: [],
                    userRemoteConfigs:
                    [[url: "https://github.com/mayadata-io/mayastor-e2e", credentialsId: "github-checkout"]]])

              }
            }
            script {
              Common().GetClusterAdminConf(e2e_environment, k8s_job)
              loki_run_id = Common().GetLokiRunId()
              abs_e2e_reports_dir = "${env.WORKSPACE}/${e2e_reports_dir}"
              sh "mkdir -p ${abs_e2e_reports_dir}"

              def cmd = "./scripts/${e2e_script} --device /dev/sdb --tag \"${params.image_tag}\" --loki_run_id \"${loki_run_id}\" --loki_test_label \"custom\" --reportsdir \"${abs_e2e_reports_dir}\" --session \"custom\" --product \"mayastor\" "

              if (params.use_ci_registry == true) {
                cmd = cmd + " --registry \"" + env.REGISTRY + "\""
              } else {
                cmd = cmd + " --registry dockerhub"
              }
              if (params.config_path != '') {
                cmd = cmd + " --config \"${params.config_path}\""
              }
              if (params.profile != '') {
                cmd = cmd + " --profile \"${params.profile}\""
              } else {
                def test_list =  "install" + "," + params.tests
                for (i = 1; i < params.iteraton.toInteger(); i ++) {
                  test_list = test_list + "," + params.tests
                }
                if (params.uninstall_test == true) {
                  test_list = test_list +  "," + "uninstall"
                }
                cmd = cmd + " --tests \"${test_list}\""
              }

              withCredentials([
                usernamePassword(credentialsId: 'GRAFANA_API', usernameVariable: 'grafana_api_user', passwordVariable: 'grafana_api_pw'),
                string(credentialsId: 'HCLOUD_TOKEN', variable: 'HCLOUD_TOKEN')
              ]) {
                Common().LokiInstall(params.image_tag, "custom")
                sh "nix-shell --run 'cd ${env.WORKSPACE}/${e2e_mayastor_dir} && ${cmd}'"
                Common().LokiUninstall(params.image_tag, "custom") // so that, if we keep the cluster, the next Loki instance can use different parameters
              }
            }
          }
          post {
            failure {
              script {
                if (params.delete_cluster_on_failure) {
                  Common().DestroyCluster(e2e_destroy_cluster_job, k8s_job)
                } else {
                  Common().WarnOrphanCluster(k8s_job)
                }
              }
            }//failure

            success {
              script {
                if (params.delete_cluster_on_success) {
                  Common().DestroyCluster(e2e_destroy_cluster_job, k8s_job)
                } else {
                  Common().WarnOrphanCluster(k8s_job)
                }
              }
            }
            always {
              archiveArtifacts "${e2e_artifacts_dir}/**/*.*"
              archiveArtifacts "${e2e_environment}/modules/k8s/secrets/admin.conf"
              // handle junit results on success or failure
              junit "${e2e_reports_dir}/**/*.xml"
            }// always
          }//post
        }//stage 'run e2e'
      }//stages
    }//stage 'test'
  }//stages
}
