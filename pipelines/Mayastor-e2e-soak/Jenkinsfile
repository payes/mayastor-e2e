#!/usr/bin/env groovy

// On-demand E2E infra configuration
// https://mayadata.atlassian.net/wiki/spaces/MS/pages/247332965/Test+infrastructure#On-Demand-E2E-K8S-Clusters

def e2e_build_cluster_job='k8s-build-cluster' // Jenkins job to build cluster
def e2e_destroy_cluster_job='k8s-destroy-cluster' // Jenkins job to destroy cluster
// Environment to run e2e test in (job param of $e2e_build_cluster_job)
def e2e_environment="hcloud-kubeadm"
// Global variable to pass current k8s job between stages
def k8s_job=""

e2e_image_tag='nightly'
e2e_local_registry=true
e2e_reports_dir='artifacts/reports/'
e2e_test_profile = 'soak'

String cron_schedule = "0 5 * * *"

xray_send_report=true
xray_soak_testplan='MQ-698'

pipeline {
  agent none
  options {
    timeout(time: 48, unit: 'HOURS')
  }
  triggers {
    cron(cron_schedule)
  }

  stages {
    stage('test') {
      stages {
        stage('build e2e cluster') {
          agent { label 'nixos' }
          steps {
            script {
              common = load "${env.WORKSPACE}/pipelines/common/common.groovy"
              k8s_job = common.BuildCluster(e2e_build_cluster_job, e2e_environment)
            }
          }
        }
        stage('run e2e') {
          agent { label 'nixos' }
          environment {
            KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
          }
          steps {
            script {
              common = load "${env.WORKSPACE}/pipelines/common/common.groovy"
              common.GetClusterAdminConf(e2e_environment, k8s_job)
              loki_run_id = common.GetLokiRunId()
              sh "mkdir -p ./${e2e_reports_dir}"
              // we need the Mayastor repo, but only for the deployment yamls
              common.GetMayastor('develop')

              def cmd = "./scripts/e2e-test.sh --device /dev/sdb --tag \"${e2e_image_tag}\" --logs --profile \"${e2e_test_profile}\" --loki_run_id \"${loki_run_id}\" --mayastor \"${env.WORKSPACE}/Mayastor\" --reportsdir \"${env.WORKSPACE}/${e2e_reports_dir}\" "

              if (e2e_local_registry == true) {
                cmd = cmd + " --registry \"" + env.REGISTRY + "\""
              }

              withCredentials([
                usernamePassword(credentialsId: 'GRAFANA_API', usernameVariable: 'grafana_api_user', passwordVariable: 'grafana_api_pw')
              ]) {
                common.LokiInstall(e2e_image_tag)
                sh "nix-shell --run '${cmd}'"
                common.LokiUninstall(e2e_image_tag) // so that, if we keep the cluster, the next Loki instance can use different parameters
              }
            }
          }
          post {
            failure {
              script {
                common = load "${env.WORKSPACE}/pipelines/common/common.groovy"
                common.WarnOrphanCluster(k8s_job)
              }
            }//failure

            always {
              common = load "${env.WORKSPACE}/pipelines/common/common.groovy"
              archiveArtifacts 'artifacts/**/*.*'
              // handle junit results on success or failure
              junit "${e2e_reports_dir}/*.xml"
              script {
                if (xray_send_report == true) {
                  def pipeline = common.GetJobBaseName()
                  def summary = "Pipeline: ${pipeline}, test plan: ${xray_soak_testplan}, git branch: ${env.BRANCH_name}, tested image tag: ${e2e_image_tag}"
                  common.SendXrayReport(xray_soak_testplan, summary, e2e_reports_dir)
                }
              }
            }// always
          }//post
        }//stage 'run e2e'
        stage('destroy e2e cluster') {
          agent { label 'nixos' }
          steps {
            script {
              common = load "${env.WORKSPACE}/pipelines/common/common.groovy"
              common.DestroyCluster(e2e_destroy_cluster_job, k8s_job)
            }
          }
        }// stage 'destroy cluster'
      }//stages
    }//stage 'test'
  }//stages
}
