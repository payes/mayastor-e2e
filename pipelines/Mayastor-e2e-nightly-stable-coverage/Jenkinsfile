#!/usr/bin/env groovy

import java.util.concurrent.LinkedBlockingQueue
import java.util.concurrent.TimeUnit

// Mayastor nightly stable coverage pipeline Jenkins script.

// On-demand E2E infra configuration
// https://mayadata.atlassian.net/wiki/spaces/MS/pages/247332965/Test+infrastructure#On-Demand-E2E-K8S-Clusters

def params = [
    // Tests Queue
    tests_queue : [] as LinkedBlockingQueue,
    // Failed Tests Queue
    failed_tests_queue : [] as LinkedBlockingQueue,
    // Artifacts stash name queue
    artefacts_stash_queue : [] as LinkedBlockingQueue,
    // Junit stash name queue
    junit_stash_queue : [] as LinkedBlockingQueue,

    // Jenkins job to build cluster
    e2e_build_cluster_job : 'k8s-build-cluster',
    // Jenkins job to destroy cluster
    e2e_destroy_cluster_job : 'k8s-destroy-cluster',
    // Environment to run e2e test in (job param of e2e_build_cluster_job)
    e2e_environment : "hcloud-kubeadm",

    // Mayastor image tag
    e2e_image_tag : 'coverage',
    // reports directory
    e2e_reports_dir : 'artifacts/reports/',
    // Test profile
    e2e_test_profile : 'nightly-stable',

    // Xray: send report
    xray_send_report : false,
    // Xray: test plan
    xray_test_plan : 'ET-388'
]

// Environment to run e2e test in (job param of $e2e_build_cluster_job)
def e2e_environment = params['e2e_environment']

def Common() {
    def common = load "./pipelines/common/common.groovy"
    return common
}

pipeline {
  agent none
  options {
    timeout(time: 7, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '365', artifactNumToKeepStr: '365'))
  }
  stages {
    stage('build tests queue')  {
        agent { label 'nixos' }
        steps {
            script {
                Common().PopulateTestQueue(params)
            }
        }
    }
    stage('test') {
        parallel {
            stage('run e2e part1') {
                agent { label 'nixos' }
                environment {
                    KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
                    RUN_UUID = UUID.randomUUID().toString()
                }
                steps {
                    script {
                            Common().RunParallelStage(params)
                    }
                }
                post {
                    always {
                        script {
                            Common().PostParallelStage(params, "${RUN_UUID}")
                        }
                    }
                }//post
            }//stage 'run e2e part1'
            stage('run e2e part2') {
                agent { label 'nixos' }
                environment {
                    KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
                    RUN_UUID = UUID.randomUUID().toString()
                }
                steps {
                    script {
                            Common().RunParallelStage(params)
                    }
                }
                post {
                    always {
                        script {
                            Common().PostParallelStage(params, "${RUN_UUID}")
                        }
                    }
                }//post
            }//stage 'run e2e part2'
            stage('run e2e part3') {
                agent { label 'nixos' }
                environment {
                    KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
                    RUN_UUID = UUID.randomUUID().toString()
                }
                steps {
                    script {
                            Common().RunParallelStage(params)
                    }
                }
                post {
                    always {
                        script {
                            Common().PostParallelStage(params, "${RUN_UUID}")
                        }
                    }
                }//post
           }//stage 'run e2e part3'
        }//parallel
    }//stage 'test'
    stage('archive artifacts'){
        agent { label 'nixos' }
        steps {
            script{
                Common().ParallelArchiveArtefacts(params)
            }
        }
    }
    stage('handle junit results'){
        agent { label 'nixos' }
        steps {
            script{
                Common().ParallelJunit(params)
            }
        }
    }
    stage('check failed tests'){
        steps {
            script{
                def failed_tests_queue = params['failed_tests_queue']
                if (failed_tests_queue.size() > 0) {
                    error("The following tests failed: " + failed_tests_queue)
                }
            }
        }
    }
  }//stages
}
