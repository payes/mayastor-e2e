#!/usr/bin/env groovy

def Common() {
    def common = load "./pipelines/common2/common.groovy"
    return common
}

def e2e_test_profile = 'smoke-test'
def xray_send_report = false
def xray_test_plan = 'MQ-2620'
def image_tag = ''
def datacore_bolt = true
def k8sv = '1.21.8'

pipeline {
    agent any
    options {
        timeout(time: 23, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '365', artifactNumToKeepStr: '365'))
    }
    parameters {
        string(defaultValue: 'develop', name: 'dataplaneBranch', trim: true, description: 'data plane branch')
        string(defaultValue: 'develop', name: 'controlplaneBranch', trim: true, description: 'control plane branch')
        string(defaultValue: 'develop', name: 'licenseBranch', trim: true, description: 'license branch')

        string(defaultValue: '', name: 'dataplaneCommitOrTag', trim: true, description: 'data plane source branch git commit id or tag, if empty branch HEAD is used.')
        string(defaultValue: '', name: 'controlplaneCommitOrTag', trim: true, description: 'control plane source branch git commit id or tag, if empty branch HEAD is used.')
        string(defaultValue: '', name: 'licenseCommitOrTag', trim: true, description: 'license source branch git commit id or tag, if empty branch HEAD is used.')

        booleanParam(defaultValue: false, name: 'publishImages', description: 'publish images')
    }
    stages {
        stage('build image') {
            agent { label 'nixos' }
            steps {
                script {
                    image_tag = 'bolt-develop-' + Common().GetTestTag()
                    def job_params = [
                        [ $class: 'StringParameterValue',  name: "dataplaneBranch",         value: params.dataplaneBranch ],
                        [ $class: 'StringParameterValue',  name: "dataplaneCommitOrTag",    value: params.dataplaneCommitOrTag ],

                        [ $class: 'StringParameterValue',  name: "controlplaneBranch",      value: params.controlplaneBranch ],
                        [ $class: 'StringParameterValue',  name: "controlplaneCommitOrTag", value: params.controlplaneCommitOrTag ],

                        [ $class: 'StringParameterValue',  name: "licenseBranch",      value: params.licenseBranch ],
                        [ $class: 'StringParameterValue',  name: "licenseCommitOrTag", value: params.licenseCommitOrTag ],

                        [ $class: 'BooleanParameterValue', name: "build_images",       value: true ],
                        [ $class: 'StringParameterValue',  name: "image_tag",          value: image_tag ],
                        [ $class: 'BooleanParameterValue', name: "datacore_bolt",      value: datacore_bolt ],
                    ]
                    build(
                       job: "generic-system-test/${env.BRANCH_name}",
                       propagate: true,
                       wait: true,
                       parameters: job_params
                   )
                }
            }
        }
        stage('smoke test') {
            agent { label 'nixos' }
            steps {
                script {
                    echo "smoke test"
                    def job_params = [
                        [ $class: 'BooleanParameterValue', name: "build_images",       value: false ],

                        [ $class: 'StringParameterValue',  name: "xray_test_plan",     value: xray_test_plan ],
                        [ $class: 'BooleanParameterValue', name: "xray_send_report",   value: xray_send_report ],

                        [ $class: 'StringParameterValue',  name: "test_profile",       value: "smoke-test" ],
                        [ $class: 'StringParameterValue',  name: "parallelism",        value: "1" ],
                        [ $class: 'StringParameterValue',  name: "kubernetes_version", value: k8sv ],
                        [ $class: 'StringParameterValue',  name: "image_tag",          value: image_tag ],
                        [ $class: 'BooleanParameterValue', name: "datacore_bolt",      value: datacore_bolt ],
                    ]
                    Common().RunTestJob(job_params, "develop")
                }
            }
        }
        stage('publish product') {
            agent { label 'nixos' }
            when {
                expression { return params.publishImages == true; }
            }
            steps {
                script {
                    echo "would have published the product here"
                }
            }
        }
    }//stages
}
