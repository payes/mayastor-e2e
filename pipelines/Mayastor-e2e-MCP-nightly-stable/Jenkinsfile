#!/usr/bin/env groovy

import java.util.concurrent.LinkedBlockingQueue
import java.util.concurrent.TimeUnit

// On-demand E2E infra configuration
// https://mayadata.atlassian.net/wiki/spaces/MS/pages/247332965/Test+infrastructure#On-Demand-E2E-K8S-Clusters

def default_test_profile = "hc1-nightly"

def e2e_params = [
    // Tests Queue
    tests_queue : [] as LinkedBlockingQueue,
    // Failed Tests Queue
    failed_tests_queue : [] as LinkedBlockingQueue,
    // Artifacts stash name queue
    artefacts_stash_queue : [] as LinkedBlockingQueue,
    // Junit stash name queue
    junit_stash_queue : [] as LinkedBlockingQueue,

    // Jenkins job to build cluster
    e2e_build_cluster_job : 'k8s-build-cluster',
    // Jenkins job to destroy cluster
    e2e_destroy_cluster_job : 'k8s-destroy-cluster',
    // Environment to run e2e test in (job param of e2e_build_cluster_job)
    e2e_environment : "hcloud-kubeadm",
    //Kubernetes version
    kubernetes_verion : '',

    // Mayastor image tag - image tag for testing.
    e2e_image_tag : '',

    // reports directory
    e2e_reports_dir : 'artifacts/reports/',
    // Test profile
    e2e_test_profile : default_test_profile,

    // Xray: send report
    xray_send_report : true,
    // Xray: test plan
    xray_test_plan : 'MQ-2184',

    publish_tag: 'e2e-nightly',
]

// Environment to run e2e test in (job param of $e2e_build_cluster_job)
def e2e_environment = e2e_params['e2e_environment']

String cron_schedule = "H 0 * * *"

def Common() {
    def common = load "./pipelines/common/common.groovy"
    return common
}


pipeline {
  agent none
  options {
    timeout(time: 23, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '365', artifactNumToKeepStr: '365'))
  }
  triggers {
    cron(cron_schedule)
  }
  parameters {
    choice(choices: [default_test_profile,'experiment'], name: 'profile', description: 'test profile')
  }
  stages {
    stage('build docker images') {
      agent { label 'nixos-mayastor' }
      steps {
        script {
          println("${params}")
          common = load "./pipelines/common/common.groovy"
          // Common functions use e2e_image-tag so set that up
          // as the test tag
          e2e_params['e2e_test_profile'] = params.profile
          if (params.profile != default_test_profile) {
                println("Profile is not ${default_test_profile}, setting testplan to ET-388")
                e2e_params['xray_test_plan'] = 'ET-388'
          }
          e2e_params['e2e_image_tag'] = 'hc1-' + common.GetTestTag()
          build_params = [
            mayastorBranch : 'hotfix-v1.0.1',
            mcpBranch : 'hotfix-v1.0.1',
            test_tag : e2e_params['e2e_image_tag']
            ]
          common.BuildMCPImages(build_params)
        }
      }
      post {
        // Always remove all docker images because they are usually used just once
        // and underlaying pkgs are already cached by nix so they can be easily
        // recreated.
        always {
          sh 'docker image prune --all --force'
        }
      }
    }//stage build docker images
    stage('push images to Docker Hub') {
      agent { label 'nixos-mayastor' }
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            script{
                def test_tag = e2e_params['e2e_image_tag']
                def publish_tag = e2e_params['publish_tag']
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'echo $PASSWORD | docker login -u $USERNAME --password-stdin'
                }
                sh "./scripts/re-tag-images.sh --src-tag ${test_tag} --alias-tag ${publish_tag} --registry dockerhub"
            }
        }
      }
      post {
          always {
              catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                sh 'docker logout'
                sh 'docker image prune --all --force'
              }
          }
      }
    }//stage 'push images'
    stage('build tests queue')  {
        agent { label 'nixos' }
        steps {
            script {
                Common().PopulateTestQueue(e2e_params)
            }
        }
    }
    stage('test') {
        parallel {
            stage('run e2e part1') {
                agent { label 'nixos' }
                environment {
                    KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
                    RUN_UUID = UUID.randomUUID().toString()
                }
                steps {
                    script {
                            Common().RunParallelStage(e2e_params)
                    }
                }
                post {
                    always {
                        script {
                            Common().PostParallelStage(e2e_params, "${RUN_UUID}")
                        }
                    }
                }//post
            }//stage 'run e2e part1'
            stage('run e2e part2') {
                agent { label 'nixos' }
                environment {
                    KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
                    RUN_UUID = UUID.randomUUID().toString()
                }
                steps {
                    script {
                            Common().RunParallelStage(e2e_params)
                    }
                }
                post {
                    always {
                        script {
                            Common().PostParallelStage(e2e_params, "${RUN_UUID}")
                        }
                    }
                }//post
            }//stage 'run e2e part2'
            stage('run e2e part3') {
                agent { label 'nixos' }
                environment {
                    KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
                    RUN_UUID = UUID.randomUUID().toString()
                }
                steps {
                    script {
                            Common().RunParallelStage(e2e_params)
                    }
                }
                post {
                    always {
                        script {
                            Common().PostParallelStage(e2e_params, "${RUN_UUID}")
                        }
                    }
                }//post
            }//stage 'run e2e part3'
            stage('run e2e part4') {
                agent { label 'nixos' }
                environment {
                    KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
                    RUN_UUID = UUID.randomUUID().toString()
                }
                steps {
                    script {
                            Common().RunParallelStage(e2e_params)
                    }
                }
                post {
                    always {
                        script {
                            Common().PostParallelStage(e2e_params, "${RUN_UUID}")
                        }
                    }
                }//post
            }//stage 'run e2e part4'
            stage('run e2e part5') {
                agent { label 'nixos' }
                environment {
                    KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
                    RUN_UUID = UUID.randomUUID().toString()
                }
                steps {
                    script {
                            Common().RunParallelStage(e2e_params)
                    }
                }
                post {
                    always {
                        script {
                            Common().PostParallelStage(e2e_params, "${RUN_UUID}")
                        }
                    }
                }//post
            }//stage 'run e2e part5'
            stage('run e2e part6') {
                agent { label 'nixos' }
                environment {
                    KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
                    RUN_UUID = UUID.randomUUID().toString()
                }
                steps {
                    script {
                            Common().RunParallelStage(e2e_params)
                    }
                }
                post {
                    always {
                        script {
                            Common().PostParallelStage(e2e_params, "${RUN_UUID}")
                        }
                    }
                }//post
            }//stage 'run e2e part6'
        }//parallel
    }//stage 'test'
    stage('handle junit results'){
        agent { label 'nixos' }
        steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                script{
                    Common().ParallelJunit(e2e_params)
                }
            }
        }
    }
    stage('html report'){
        agent { label 'nixos' }
        steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                script {
                    def xray_test_plan = e2e_params['xray_test_plan']
                    def xray_project = xray_test_plan.split('-')[0]
                    withCredentials([string(credentialsId: 'XRAY_CLIENT_ID', variable: 'XRAY_CLIENT_ID')]) {
                        withCredentials([string(credentialsId: 'XRAY_CLIENT_SECRET', variable: 'XRAY_CLIENT_SECRET')]) {
                        cmd = "./scripts/xray-report.py --collect ${xray_test_plan} --project ${xray_project}"
                        sh "nix-shell --run '${cmd}'"
                        }
                    }
                    def files = sh(script: "find artifacts/ -type f", returnStdout: true).split()
                    if (files.size() != 0) {
                        def artefacts_stash_queue = e2e_params['artefacts_stash_queue']
                        def stash_name = "xray-report"
                        stash includes: 'artifacts/**/**', name: stash_name
                        artefacts_stash_queue.add(stash_name)
                    } else {
                        println "no files to archive"
                    }
                } //script
            } // catchError
        } // steps
    }
    stage('archive artifacts'){
        agent { label 'nixos' }
        steps {
            script{
                Common().ParallelArchiveArtefacts(e2e_params)
            }
        }
    }
    stage('check failed tests'){
        steps {
            script{
                def failed_tests_queue = e2e_params['failed_tests_queue']
                if (failed_tests_queue.size() > 0) {
                    error("The following tests failed: " + failed_tests_queue)
                }
            }
        }
    }
  }//stages
}//pipeline
