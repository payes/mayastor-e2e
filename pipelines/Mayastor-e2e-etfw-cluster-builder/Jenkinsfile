
def e2e_environment="hcloud-kubeadm"
def e2e_build_cluster_job='k8s-build-cluster' // Jenkins job to build cluster
def e2e_destroy_cluster_job='k8s-destroy-cluster'
def k8s_job=""

def BuildEtfwCluster(e2e_build_cluster_job, e2e_environment, node_type, kubernetes_version) {
  def uuid = UUID.randomUUID()
  return build(
    job: "${e2e_build_cluster_job}",
    propagate: true,
    wait: true,
    parameters: [
      [
        $class: 'StringParameterValue',
        name: "ENVIRONMENT",
        value: "${e2e_environment}"
      ],
      [
        $class: 'StringParameterValue',
        name: "UUID",
        value: "${uuid}"
      ],
      [
        $class: 'StringParameterValue',
        name: "NODE_COUNT",
        value: '4'
      ],
      [
        $class: 'StringParameterValue',
        name: "NODE_TYPE",
        value: "${node_type}"
      ],
      [
        $class: 'StringParameterValue',
        name: "KUBERNETES_VERSION",
        value: "${kubernetes_version}"
      ]
    ]
  )
}

def GetClusterAdminConf(e2e_build_cluster_job, e2e_environment, k8s_job_number) {
  // FIXME(arne-rusek): move hcloud's config to top-level dir in TF scripts
  sh """
    mkdir -p "${e2e_environment}/modules/k8s/secrets"
  """

  copyArtifacts(
    projectName: "${e2e_build_cluster_job}",
    selector: specific("${k8s_job_number}"),
    filter: "${e2e_environment}/modules/k8s/secrets/admin.conf",
    target: "",
    fingerprintArtifacts: true
  )
  sh 'kubectl get nodes -o wide'
}

def Common() {
    def common = load "./pipelines/common/common.groovy"
    return common
}

pipeline {
    agent { label 'nixos' }
    parameters {
        string(
            defaultValue: '',
            name: 'image_tag',
            trim: true,
            description: 'Image tag of mayastor images to install, e.g. hc1-2022-01-04-00-17-03 <br> Images are built by nightly runs of Mayastor-e2e-MCP-nightly.'
        )
        string(
            defaultValue: '1.21.8',
            name: 'kubernetes_version',
            trim: true,
            description: 'Kubernetes version to install.'
        )
        choice(
            name: 'NODE_TYPE',
            choices: ['cpx31', 'cpx21', 'cx21', 'cx31', 'cx41', 'cpx41', 'cx51', 'cpx51'],
            description: '''
                WARNING: nodes must be compatible with selected environment. CPX*, CX* are hetzner nodes (see <a href="https://www.hetzner.com/cloud">hetzner cloud</a>). t3.* i3.* are AWS nodes.
                <table>
                  <tr><td>Node</td><td>CPU</td><td>MEM</td></tr>
                  <tr><td>cx21</td><td>2</td><td>4Gi</td></tr>
                  <tr><td>cpx21</td><td>3</td><td>4Gi</td></tr>
                  <tr><td>cx31</td><td>2</td><td>8Gi</td></tr>
                  <tr><td>cpx31</td><td>4</td><td>8Gi</td></tr>
                  <tr><td>cx41</td><td>4</td><td>16Gi</td></tr>
                  <tr><td>cpx41</td><td>8</td><td>16Gi</td></tr>
                  <tr><td>cx51</td><td>8</td><td>32Gi</td></tr>
                  <tr><td>cpx51</td><td>16</td><td>32Gi</td></tr>
                </table>''')
    }
    stages {
        stage('parameter check') {
            steps {
                script {
                    if (params.image_tag == '') {
                        error 'Mayastor image tag not specified'
                    }
                }
            }
        }
        stage('build cluster') {
            steps {
                script {
                    k8s_job = BuildEtfwCluster(
                        e2e_build_cluster_job,
                        e2e_environment,
                        params.NODE_TYPE,
                        params.kubernetes_version)
                }
            }
        }
        stage('label the etfw node, install Loki') {
            environment {
                KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
            }
            steps {
                script {
                    Common().GetClusterAdminConf(e2e_environment, k8s_job)
                    // cluster should have one node dedicated to etfw pods
                    def cmd = 'kubectl label node node-0-' + k8s_job.getNumber() + ' openebs.io/engine-'
                    def rc = sh(script: cmd, returnStatus: true)
                    if (rc != 0) {
                        error 'Failed, to unlabel node'
                    }

                    cmd = 'kubectl taint nodes node-0-' + k8s_job.getNumber() + ' openebs.io/role=mayastor-e2e:NoExecute'
                    rc = sh(script: cmd, returnStatus: true)
                    if (rc != 0) {
                        error 'Failed, to taint node'
                    }
                    withCredentials([
                        usernamePassword(credentialsId: 'GRAFANA_API', usernameVariable: 'grafana_api_user', passwordVariable: 'grafana_api_pw'),
                        string(credentialsId: 'HCLOUD_TOKEN', variable: 'HCLOUD_TOKEN')
                    ]) {
                        Common().LokiInstall(k8s_job.getNumber(), 'mayastor-etfw')
                    }
                    archiveArtifacts "${e2e_environment}/modules/k8s/secrets/admin.conf"
                }
            }
        }
        stage('install mayastor') {
            environment {
                KUBECONFIG = "${env.WORKSPACE}/${e2e_environment}/modules/k8s/secrets/admin.conf"
            }
            steps {
                script {
                    Common().GetClusterAdminConf(e2e_environment, k8s_job)
                    def e2e_reports_dir = 'artifacts/reports/'
                    String loki_run_id = Common().GetJobBaseName() + '-' + env.BUILD_NUMBER
                    def cmd = "./scripts/e2e-test.sh --device /dev/sdb --tag \"${params.image_tag}\" --logs --onfail stop --tests install --loki_run_id \"${loki_run_id}\" --loki_test_label install --reportsdir \"${env.WORKSPACE}/${e2e_reports_dir}\" --registry \"${env.REGISTRY}\" "
                    withCredentials([
                        usernamePassword(credentialsId: 'GRAFANA_API', usernameVariable: 'grafana_api_user', passwordVariable: 'grafana_api_pw'),
                        string(credentialsId: 'HCLOUD_TOKEN', variable: 'HCLOUD_TOKEN')
                    ]) {
                        sh "nix-shell --run '${cmd}'"
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                Common().DestroyCluster(e2e_destroy_cluster_job, k8s_job)
            }
        }
    }
}

